Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -I/nobackupp19/dekelsch/Software/ParMmg/build/Mmg-prefix/src/Mmg-build/include -I/nobackupp19/dekelsch/Software/ParMmg/build/include -I/nobackupp19/dekelsch/parmetis-4.0.3/parmetis-install/include -I/nobackupp19/dekelsch/parmetis-4.0.3/metis/metis-install/include -I/nobackupp19/dekelsch/boost_1_71_0/boost-install/include -I/home1/dekelsch/Software/tinyxml -I/nobackupp19/dekelsch/CGNS-3.3.0/src/install/include -I/home1/dekelsch/local/lib/python3.12/site-packages/numpy/_core/include -I/home1/dekelsch/local/lib/python3.12/site-packages/mpi4py/include -I/home1/dekelsch/local/include/python3.12/ -std=c++17 -g -DMPI_NO_CPPBIND -fPIC -lm -lpthread -ldl -lutil -L/home1/dekelsch/local/lib/python3.12/ -O2 -Wall -axAVX,CORE-AVX2,CORE-AVX512 -qopt-report-phase=vec -qopt-report=5 -o PartiClass.so -L/nobackupp19/dekelsch/Software/ParMmg/build/Mmg-prefix/src/Mmg-build/lib -L/nobackupp19/dekelsch/Software/ParMmg/build/lib -L/nobackupp19/dekelsch/parmetis-4.0.3/parmetis-install/lib -L/nobackupp19/dekelsch/parmetis-4.0.3/metis/metis-install/lib -L/nobackupp19/dekelsch/boost_1_71_0/boost-install/stage/lib -L/home1/dekelsch/Software/tinyxml -L/nobackupp19/dekelsch/CGNS-3.3.0/src/install/lib -shared -lm -lpthread -ldl -lutil -L/home1/dekelsch/local/lib/python3.12/ -lmpi -lparmetis -lmetis -lhdf5 -mkl -lparmmg -lmmg -lcgns -lmpi

Begin optimization report for: AllGatherMap_I(std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, MPI_Comm)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(20,35)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(50,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_operations.cpp(57,29)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_operations.cpp(59,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(59,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(59,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(59,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::~map(std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: AllGatherMap_D(std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(84,35)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(115,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_operations.cpp(120,29)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_operations.cpp(122,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(122,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(122,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(122,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::~map(std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: FindBoundaryID(int *, int, int)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(168,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: FindDuplicates(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1944,7) inlined into ../src/adapt_operations.cpp(189,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at /usr/include/c++/8/bits/stl_iterator.h(806,4) inlined into ../src/adapt_operations.cpp(189,5)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1902,4) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1902,4) inlined into ../src/adapt_operations.cpp(189,5)
         remark #15523: loop was not vectorized: loop control variable __first._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1905,4) inlined into ../src/adapt_operations.cpp(189,5)
         remark #15523: loop was not vectorized: loop control variable __last._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(341,25) inlined into ../src/adapt_operations.cpp(189,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1673,54) inlined into ../src/adapt_operations.cpp(189,5)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(405,7) inlined into ../src/adapt_operations.cpp(189,5)
   remark #15523: loop was not vectorized: loop control variable __last._M_current was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1866,53) inlined into ../src/adapt_operations.cpp(189,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1828,7) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1828,7) inlined into ../src/adapt_operations.cpp(189,5)
      remark #15523: loop was not vectorized: loop control variable __next._M_current was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(192,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_operations.cpp(196,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(198,33)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_operations.cpp(204,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::__adjust_heap<std::vector<int, std::allocator<int>>::iterator, std::__iterator_traits<std::vector<int, std::allocator<int>>::iterator, std::__void_t<>>::difference_type, std::remove_reference<std::move_iterator<int *>::__base_ref>::type, __gnu_cxx::__ops::_Iter_less_iter>(std::vector<int, std::allocator<int>>::iterator, std::__iterator_traits<std::vector<int, std::allocator<int>>::iterator, std::__void_t<>>::difference_type, std::__iterator_traits<std::vector<int, std::allocator<int>>::iterator, std::__void_t<>>::difference_type, std::remove_reference<std::move_iterator<int *>::__base_ref>::type, __gnu_cxx::__ops::_Iter_less_iter)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(219,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(133,7) inlined into /usr/include/c++/8/bits/stl_heap.h(238,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::__insertion_sort<std::vector<int, std::allocator<int>>::iterator, __gnu_cxx::__ops::_Iter_less_iter>(std::vector<int, std::allocator<int>>::iterator, std::vector<int, std::allocator<int>>::iterator, __gnu_cxx::__ops::_Iter_less_iter)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1845,57)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1828,7) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1828,7) inlined into /usr/include/c++/8/bits/stl_algo.h(1856,6)
      remark #15523: loop was not vectorized: loop control variable __next._M_current was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::__introsort_loop<std::vector<int, std::allocator<int>>::iterator, long, __gnu_cxx::__ops::_Iter_less_iter>(std::vector<int, std::allocator<int>>::iterator, std::vector<int, std::allocator<int>>::iterator, long, __gnu_cxx::__ops::_Iter_less_iter)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1944,7)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at /usr/include/c++/8/bits/predefined_ops.h(43,25) inlined into /usr/include/c++/8/bits/stl_algo.h(1954,56)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1902,4) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1902,4) inlined into /usr/include/c++/8/bits/stl_algo.h(1954,56)
         remark #15523: loop was not vectorized: loop control variable __first._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1905,4) inlined into /usr/include/c++/8/bits/stl_algo.h(1954,56)
         remark #15523: loop was not vectorized: loop control variable __last._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(346,4) inlined into /usr/include/c++/8/bits/stl_algo.h(1949,8)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_heap.h(219,7) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(219,7) inlined into /usr/include/c++/8/bits/stl_algo.h(1949,8)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(133,7) inlined into /usr/include/c++/8/bits/stl_algo.h(1949,8)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(405,7) inlined into /usr/include/c++/8/bits/stl_algo.h(1949,8)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_heap.h(219,7) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(219,7) inlined into /usr/include/c++/8/bits/stl_algo.h(1949,8)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(133,7) inlined into /usr/include/c++/8/bits/stl_algo.h(1949,8)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_M_erase(std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type> *, std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::set<int, std::less<int>, std::allocator<int>>::~set(std::set<int, std::less<int>, std::allocator<int>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_set.h(282,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: binarySearch(int *, int, int, int)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(216,16)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: FindDuplicatesInParallel_VecV2(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, int, int, MPI_Comm)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(265,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(265,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(265,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(281,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between red_dupl_offsets[i+1] (283:9) and red_dupl_offsets[i] (283:9)
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(281,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(249,23)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(251,23) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(253,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_operations.cpp(299,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: FindDuplicatesInParallel_VecV2(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, int, int, MPI_Comm) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(265,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(265,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(265,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(281,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between red_dupl_offsets[i+1] (283:9) and red_dupl_offsets[i] (283:9)
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(281,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(249,23)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(251,23) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(253,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_operations.cpp(299,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: FindDuplicatesInParallel_VecV2(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, int, int, MPI_Comm) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(265,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(281,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between red_dupl_offsets[i+1] (283:9) and red_dupl_offsets[i] (283:9)
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(281,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(249,23)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(251,23) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(253,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_operations.cpp(299,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: FindDuplicatesInParallel_VecV2(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, int, int, MPI_Comm) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk1>
   remark #15388: vectorization support: reference red_dupl_locs[i] has aligned access   [ ../src/adapt_operations.cpp(265,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference dupl_locs[i] has aligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference dupl_locs[i] has aligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(281,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between red_dupl_offsets[i+1] (283:9) and red_dupl_offsets[i] (283:9)
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(281,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(249,23)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(251,23) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(253,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_operations.cpp(299,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: FindDuplicatesInParallel_VecV2(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, int, int, MPI_Comm) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(239,31)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk1>
   remark #15388: vectorization support: reference red_dupl_locs[i] has aligned access   [ ../src/adapt_operations.cpp(265,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference dupl_locs[i] has aligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference dupl_locs[i] has aligned access   [ ../src/adapt_operations.cpp(273,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(263,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(281,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between red_dupl_offsets[i+1] (283:9) and red_dupl_offsets[i] (283:9)
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(281,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(288,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(249,23)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(251,23) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(253,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_operations.cpp(299,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: mergeSort_vec(std::vector<int, std::allocator<int>> *, int, int, std::vector<int, std::allocator<int>> *, int, MPI_Comm, std::vector<int, std::allocator<int>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1944,7) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at /usr/include/c++/8/bits/predefined_ops.h(43,25) inlined into ../src/adapt_operations.cpp(529,5)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1902,4) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1902,4) inlined into ../src/adapt_operations.cpp(529,5)
         remark #15523: loop was not vectorized: loop control variable __first._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1905,4) inlined into ../src/adapt_operations.cpp(529,5)
         remark #15523: loop was not vectorized: loop control variable __last._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(341,25) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1673,54) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(405,7) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15523: loop was not vectorized: loop control variable __last._M_current was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1866,53) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1828,7) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1828,7) inlined into ../src/adapt_operations.cpp(529,5)
      remark #15523: loop was not vectorized: loop control variable __next._M_current was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(533,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(565,13) ]
LOOP END
===========================================================================

Begin optimization report for: mergeSort_vec(std::vector<int, std::allocator<int>> *, int, int, std::vector<int, std::allocator<int>> *, int, MPI_Comm, std::vector<int, std::allocator<int>> *) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1944,7) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at /usr/include/c++/8/bits/predefined_ops.h(43,25) inlined into ../src/adapt_operations.cpp(529,5)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1902,4) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1902,4) inlined into ../src/adapt_operations.cpp(529,5)
         remark #15523: loop was not vectorized: loop control variable __first._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1905,4) inlined into ../src/adapt_operations.cpp(529,5)
         remark #15523: loop was not vectorized: loop control variable __last._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(341,25) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1673,54) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(405,7) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15523: loop was not vectorized: loop control variable __last._M_current was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1866,53) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1828,7) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1828,7) inlined into ../src/adapt_operations.cpp(529,5)
      remark #15523: loop was not vectorized: loop control variable __next._M_current was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(533,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(565,13) ]
LOOP END
===========================================================================

Begin optimization report for: mergeSort_vec(std::vector<int, std::allocator<int>> *, int, int, std::vector<int, std::allocator<int>> *, int, MPI_Comm, std::vector<int, std::allocator<int>> *) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1944,7) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at /usr/include/c++/8/bits/predefined_ops.h(43,25) inlined into ../src/adapt_operations.cpp(529,5)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1902,4) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1902,4) inlined into ../src/adapt_operations.cpp(529,5)
         remark #15523: loop was not vectorized: loop control variable __first._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1905,4) inlined into ../src/adapt_operations.cpp(529,5)
         remark #15523: loop was not vectorized: loop control variable __last._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(341,25) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1673,54) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(405,7) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15523: loop was not vectorized: loop control variable __last._M_current was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1866,53) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1828,7) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1828,7) inlined into ../src/adapt_operations.cpp(529,5)
      remark #15523: loop was not vectorized: loop control variable __next._M_current was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(533,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(565,13) ]
LOOP END
===========================================================================

Begin optimization report for: mergeSort_vec(std::vector<int, std::allocator<int>> *, int, int, std::vector<int, std::allocator<int>> *, int, MPI_Comm, std::vector<int, std::allocator<int>> *) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1944,7) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at /usr/include/c++/8/bits/predefined_ops.h(43,25) inlined into ../src/adapt_operations.cpp(529,5)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1902,4) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1902,4) inlined into ../src/adapt_operations.cpp(529,5)
         remark #15523: loop was not vectorized: loop control variable __first._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1905,4) inlined into ../src/adapt_operations.cpp(529,5)
         remark #15523: loop was not vectorized: loop control variable __last._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(341,25) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1673,54) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(405,7) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15523: loop was not vectorized: loop control variable __last._M_current was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1866,53) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1828,7) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1828,7) inlined into ../src/adapt_operations.cpp(529,5)
      remark #15523: loop was not vectorized: loop control variable __next._M_current was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(533,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(565,13) ]
LOOP END
===========================================================================

Begin optimization report for: mergeSort_vec(std::vector<int, std::allocator<int>> *, int, int, std::vector<int, std::allocator<int>> *, int, MPI_Comm, std::vector<int, std::allocator<int>> *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(543,36)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1944,7) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at /usr/include/c++/8/bits/predefined_ops.h(43,25) inlined into ../src/adapt_operations.cpp(529,5)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1902,4) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1902,4) inlined into ../src/adapt_operations.cpp(529,5)
         remark #15523: loop was not vectorized: loop control variable __first._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1905,4) inlined into ../src/adapt_operations.cpp(529,5)
         remark #15523: loop was not vectorized: loop control variable __last._M_current was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(341,25) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1673,54) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_heap.h(405,7) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15523: loop was not vectorized: loop control variable __last._M_current was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1866,53) inlined into ../src/adapt_operations.cpp(529,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /usr/include/c++/8/bits/stl_algo.h(1828,7) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(1828,7) inlined into ../src/adapt_operations.cpp(529,5)
      remark #15523: loop was not vectorized: loop control variable __next._M_current was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(533,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(565,13) ]
LOOP END
===========================================================================

Begin optimization report for: merge_vec(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(442,5)
   remark #15389: vectorization support: reference a->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(444,24) ]
   remark #15389: vectorization support: reference at (444:15) has unaligned access   [ ../src/adapt_operations.cpp(444,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.269
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 1.620 
   remark #15478: estimated potential speedup: 4.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(442,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference a->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(444,24) ]
   remark #15389: vectorization support: reference at (444:15) has unaligned access   [ ../src/adapt_operations.cpp(444,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.683
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 1.620 
   remark #15478: estimated potential speedup: 4.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(446,5)
   remark #15389: vectorization support: reference b->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(448,24) ]
   remark #15389: vectorization support: reference at (448:15) has unaligned access   [ ../src/adapt_operations.cpp(448,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.240
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.560 
   remark #15478: estimated potential speedup: 4.150 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(446,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference b->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(448,24) ]
   remark #15389: vectorization support: reference at (448:15) has unaligned access   [ ../src/adapt_operations.cpp(448,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.425
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.560 
   remark #15478: estimated potential speedup: 4.150 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(431,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: merge_vec(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(442,5)
   remark #15389: vectorization support: reference a->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(444,24) ]
   remark #15389: vectorization support: reference at (444:15) has unaligned access   [ ../src/adapt_operations.cpp(444,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.292
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(442,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference a->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(444,24) ]
   remark #15389: vectorization support: reference at (444:15) has unaligned access   [ ../src/adapt_operations.cpp(444,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.966
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(446,5)
   remark #15389: vectorization support: reference b->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(448,24) ]
   remark #15389: vectorization support: reference at (448:15) has unaligned access   [ ../src/adapt_operations.cpp(448,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.261
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 2.870 
   remark #15478: estimated potential speedup: 2.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(446,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference b->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(448,24) ]
   remark #15389: vectorization support: reference at (448:15) has unaligned access   [ ../src/adapt_operations.cpp(448,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.607
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 2.870 
   remark #15478: estimated potential speedup: 2.320 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(431,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: merge_vec(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(442,5)
   remark #15389: vectorization support: reference a->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(444,24) ]
   remark #15389: vectorization support: reference at (444:15) has unaligned access   [ ../src/adapt_operations.cpp(444,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.292
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.580 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(442,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(446,5)
   remark #15389: vectorization support: reference b->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(448,24) ]
   remark #15389: vectorization support: reference at (448:15) has unaligned access   [ ../src/adapt_operations.cpp(448,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.261
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 2.870 
   remark #15478: estimated potential speedup: 2.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(446,5)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(431,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: merge_vec(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(442,5)
   remark #15389: vectorization support: reference a->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(444,24) ]
   remark #15389: vectorization support: reference at (444:15) has unaligned access   [ ../src/adapt_operations.cpp(444,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.346
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 6.500 
   remark #15478: estimated potential speedup: 1.070 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(442,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(446,5)
   remark #15389: vectorization support: reference b->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(448,24) ]
   remark #15389: vectorization support: reference at (448:15) has unaligned access   [ ../src/adapt_operations.cpp(448,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.158
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 9.500 
   remark #15478: estimated potential speedup: 0.630 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(446,5)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(431,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: merge_vec(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(426,29)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(442,5)
   remark #15389: vectorization support: reference a->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(444,24) ]
   remark #15389: vectorization support: reference at (444:15) has unaligned access   [ ../src/adapt_operations.cpp(444,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.182
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(442,5)
<Remainder>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(446,5)
   remark #15389: vectorization support: reference b->_M_start[__n] has unaligned access   [ ../src/adapt_operations.cpp(448,24) ]
   remark #15389: vectorization support: reference at (448:15) has unaligned access   [ ../src/adapt_operations.cpp(448,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.143
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 10.500 
   remark #15478: estimated potential speedup: 0.660 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(446,5)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(431,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: FindDuplicatesInParallel(std::vector<int, std::allocator<int>> *, int *, int, int, MPI_Comm)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(342,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(342,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(342,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(358,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between red_dupl_offsets[i+1] (360:9) and red_dupl_offsets[i] (360:9)
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(358,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(326,23)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(328,23) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(330,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_operations.cpp(380,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: FindDuplicatesInParallel(std::vector<int, std::allocator<int>> *, int *, int, int, MPI_Comm) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(342,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(342,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(342,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(358,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between red_dupl_offsets[i+1] (360:9) and red_dupl_offsets[i] (360:9)
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(358,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(326,23)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(328,23) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(330,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_operations.cpp(380,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: FindDuplicatesInParallel(std::vector<int, std::allocator<int>> *, int *, int, int, MPI_Comm) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk1>
   remark #15389: vectorization support: reference red_dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(342,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk2>
   remark #15389: vectorization support: reference dupl_locs[i] has unaligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(358,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between red_dupl_offsets[i+1] (360:9) and red_dupl_offsets[i] (360:9)
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(358,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(326,23)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(328,23) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(330,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_operations.cpp(380,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: FindDuplicatesInParallel(std::vector<int, std::allocator<int>> *, int *, int, int, MPI_Comm) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk1>
   remark #15388: vectorization support: reference red_dupl_locs[i] has aligned access   [ ../src/adapt_operations.cpp(342,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference dupl_locs[i] has aligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference dupl_locs[i] has aligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(358,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between red_dupl_offsets[i+1] (360:9) and red_dupl_offsets[i] (360:9)
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(358,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(326,23)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(328,23) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(330,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_operations.cpp(380,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: FindDuplicatesInParallel(std::vector<int, std::allocator<int>> *, int *, int, int, MPI_Comm) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk1>
   remark #15388: vectorization support: reference red_dupl_locs[i] has aligned access   [ ../src/adapt_operations.cpp(342,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference dupl_locs[i] has aligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference dupl_locs[i] has aligned access   [ ../src/adapt_operations.cpp(350,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(340,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(358,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between red_dupl_offsets[i+1] (360:9) and red_dupl_offsets[i] (360:9)
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(358,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.cpp(365,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(326,23)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_operations.cpp(328,23) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.cpp(330,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_operations.cpp(380,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: mergeSort(int, int, int *, int, MPI_Comm, int *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(465,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: merge(int *, int *, int, int, int *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(407,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_operations.cpp(407,5)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at ../src/adapt_operations.cpp(407,5)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(411,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_operations.cpp(411,5)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at ../src/adapt_operations.cpp(411,5)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(396,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: largest(int *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference arr[i] has unaligned access   [ ../src/adapt_operations.cpp(594,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.214
   remark #15355: vectorization support: max is int type reduction   [ ../src/adapt_operations.cpp(588,13) ]
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.310 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
   remark #15389: vectorization support: reference arr[i] has unaligned access   [ ../src/adapt_operations.cpp(594,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 8.200
   remark #15355: vectorization support: max is int type reduction   [ ../src/adapt_operations.cpp(588,13) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.310 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference arr[i] has unaligned access   [ ../src/adapt_operations.cpp(594,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.214
   remark #15355: vectorization support: max is int type reduction   [ ../src/adapt_operations.cpp(588,13) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.310 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: largest(int *, int) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference arr[i] has unaligned access   [ ../src/adapt_operations.cpp(594,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.000
   remark #15355: vectorization support: max is int type reduction   [ ../src/adapt_operations.cpp(588,13) ]
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 6.270 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
   remark #15389: vectorization support: reference arr[i] has unaligned access   [ ../src/adapt_operations.cpp(594,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 7.000
   remark #15355: vectorization support: max is int type reduction   [ ../src/adapt_operations.cpp(588,13) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 6.270 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference arr[i] has unaligned access   [ ../src/adapt_operations.cpp(594,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.000
   remark #15355: vectorization support: max is int type reduction   [ ../src/adapt_operations.cpp(588,13) ]
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 6.270 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: largest(int *, int) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
   remark #15389: vectorization support: reference arr[i] has unaligned access   [ ../src/adapt_operations.cpp(594,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 7.000
   remark #15355: vectorization support: max is int type reduction   [ ../src/adapt_operations.cpp(588,13) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 6.270 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: largest(int *, int) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
   remark #15388: vectorization support: reference arr[i] has aligned access   [ ../src/adapt_operations.cpp(594,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 8.200
   remark #15355: vectorization support: max is int type reduction   [ ../src/adapt_operations.cpp(588,13) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.130 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: largest(int *, int) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
   remark #15388: vectorization support: reference arr[i] has aligned access   [ ../src/adapt_operations.cpp(594,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.412
   remark #15355: vectorization support: max is int type reduction   [ ../src/adapt_operations.cpp(588,13) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.250 
   remark #15478: estimated potential speedup: 1.360 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(593,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: TestFindRank(MPI_Comm)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(614,5)
   remark #15389: vectorization support: reference arr[_2] has unaligned access
   remark #15388: vectorization support: reference at (614:14) has aligned access   [ ../src/adapt_operations.cpp(614,14) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 3.070 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(614,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: TestFindRank(MPI_Comm) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(614,5)
   remark #15389: vectorization support: reference arr[_2] has unaligned access
   remark #15388: vectorization support: reference at (614:14) has aligned access   [ ../src/adapt_operations.cpp(614,14) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 2.500 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(614,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: TestFindRank(MPI_Comm) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(614,5)
   remark #15389: vectorization support: reference arr[_2] has unaligned access
   remark #15388: vectorization support: reference at (614:14) has aligned access   [ ../src/adapt_operations.cpp(614,14) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 2.500 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(614,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: TestFindRank(MPI_Comm) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_operations.cpp(614,5)
   remark #15389: vectorization support: reference arr[_2] has unaligned access
   remark #15388: vectorization support: reference at (614:14) has aligned access   [ ../src/adapt_operations.cpp(614,14) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.730 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_operations.cpp(614,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/char_traits.h(233,7) inlined into /usr/include/c++/8/bits/char_traits.h(327,6)
   remark #15523: loop was not vectorized: loop control variable __s was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/char_traits.h(165,7) inlined into /usr/include/c++/8/bits/char_traits.h(328,11)
   remark #15523: loop was not vectorized: loop control variable __i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: FindRank(int *, int, int)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.cpp(143,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type>(std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, const std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.421
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.250 
   remark #15478: estimated potential speedup: 9.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.250 
   remark #15478: estimated potential speedup: 9.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.250 
   remark #15478: estimated potential speedup: 9.370 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type>(std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, const std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.857
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type>(std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, const std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.857
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.143
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type>(std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, const std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type &) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.769
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.810 
   remark #15478: estimated potential speedup: 3.070 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type>(std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, const std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 2.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================
