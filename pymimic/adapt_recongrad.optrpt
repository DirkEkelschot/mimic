Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -I/nobackupp19/dekelsch/Software/ParMmg/build/Mmg-prefix/src/Mmg-build/include -I/nobackupp19/dekelsch/Software/ParMmg/build/include -I/nobackupp19/dekelsch/parmetis-4.0.3/parmetis-install/include -I/nobackupp19/dekelsch/parmetis-4.0.3/metis/metis-install/include -I/nobackupp19/dekelsch/boost_1_71_0/boost-install/include -I/home1/dekelsch/Software/tinyxml -I/nobackupp19/dekelsch/CGNS-3.3.0/src/install/include -I/home1/dekelsch/local/lib/python3.12/site-packages/numpy/_core/include -I/home1/dekelsch/local/lib/python3.12/site-packages/mpi4py/include -I/home1/dekelsch/local/include/python3.12/ -std=c++17 -g -DMPI_NO_CPPBIND -fPIC -lm -lpthread -ldl -lutil -L/home1/dekelsch/local/lib/python3.12/ -O2 -Wall -axAVX,CORE-AVX2,CORE-AVX512 -qopt-report-phase=vec -qopt-report=5 -o PartiClass.so -L/nobackupp19/dekelsch/Software/ParMmg/build/Mmg-prefix/src/Mmg-build/lib -L/nobackupp19/dekelsch/Software/ParMmg/build/lib -L/nobackupp19/dekelsch/parmetis-4.0.3/parmetis-install/lib -L/nobackupp19/dekelsch/parmetis-4.0.3/metis/metis-install/lib -L/nobackupp19/dekelsch/boost_1_71_0/boost-install/stage/lib -L/home1/dekelsch/Software/tinyxml -L/nobackupp19/dekelsch/CGNS-3.3.0/src/install/lib -shared -lm -lpthread -ldl -lutil -L/home1/dekelsch/local/lib/python3.12/ -lmpi -lparmetis -lmetis -lhdf5 -mkl -lparmmg -lmmg -lcgns -lmpi

Begin optimization report for: Py_ComputedUdx_LSQ_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, int, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Array<double> *, MPI_Comm)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(30,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(31,30)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(45,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(47,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U1ba_V->data[j*U1ba_V->ncol+q] (22:13) and U1ba_V->data[q*U1ba_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U1ba_V->data[q*U1ba_V->ncol+j] (22:13) and U1ba_V->data[j*U1ba_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(161,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(164,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj+s] (166:15) and U1ba_V->data[s*U1ba_V->ncol+j] (166:15)
      remark #15346: vector dependence: assumed ANTI dependence between U1ba_V->data[s*U1ba_V->ncol+j] (166:15) and A_cm[j*nadj+s] (166:15)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(36,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(39,30) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(55,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(57,31) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(65,29)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(68,8)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(70,36) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(77,29)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(79,43)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(81,39) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(114,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(117,43) ]

         LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(118,36)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(174,16)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Py_ComputedUdx_LSQ_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, int, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Array<double> *, MPI_Comm) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(30,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(31,30)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(45,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(47,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U1ba_V->data[j*U1ba_V->ncol+q] (22:13) and U1ba_V->data[q*U1ba_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U1ba_V->data[q*U1ba_V->ncol+j] (22:13) and U1ba_V->data[j*U1ba_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(161,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(164,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj+s] (166:15) and U1ba_V->data[s*U1ba_V->ncol+j] (166:15)
      remark #15346: vector dependence: assumed ANTI dependence between U1ba_V->data[s*U1ba_V->ncol+j] (166:15) and A_cm[j*nadj+s] (166:15)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(36,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(39,30) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(55,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(57,31) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(65,29)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(68,8)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(70,36) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(77,29)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(79,43)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(81,39) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(114,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(117,43) ]

         LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(118,36)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(174,16)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Py_ComputedUdx_LSQ_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, int, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Array<double> *, MPI_Comm) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(30,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(31,30)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(45,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(47,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U1ba_V->data[j*U1ba_V->ncol+q] (22:13) and U1ba_V->data[q*U1ba_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U1ba_V->data[q*U1ba_V->ncol+j] (22:13) and U1ba_V->data[j*U1ba_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(161,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(164,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj+s] (166:15) and U1ba_V->data[s*U1ba_V->ncol+j] (166:15)
      remark #15346: vector dependence: assumed ANTI dependence between U1ba_V->data[s*U1ba_V->ncol+j] (166:15) and A_cm[j*nadj+s] (166:15)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(36,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(39,30) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(55,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(57,31) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(65,29)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(68,8)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(70,36) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(77,29)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(79,43)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(81,39) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(114,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(117,43) ]

         LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(118,36)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(174,16)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Py_ComputedUdx_LSQ_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, int, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Array<double> *, MPI_Comm) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(30,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(31,30)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(45,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(47,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U1ba_V->data[j*U1ba_V->ncol+q] (22:13) and U1ba_V->data[q*U1ba_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U1ba_V->data[q*U1ba_V->ncol+j] (22:13) and U1ba_V->data[j*U1ba_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(161,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(164,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj+s] (166:15) and U1ba_V->data[s*U1ba_V->ncol+j] (166:15)
      remark #15346: vector dependence: assumed ANTI dependence between U1ba_V->data[s*U1ba_V->ncol+j] (166:15) and A_cm[j*nadj+s] (166:15)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(36,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(39,30) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(55,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(57,31) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(65,29)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(68,8)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(70,36) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(77,29)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(79,43)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(81,39) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(114,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(117,43) ]

         LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(118,36)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(174,16)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Py_ComputedUdx_LSQ_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, int, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Array<double> *, MPI_Comm) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(30,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(31,30)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(45,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(47,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U1ba_V->data[j*U1ba_V->ncol+q] (22:13) and U1ba_V->data[q*U1ba_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U1ba_V->data[q*U1ba_V->ncol+j] (22:13) and U1ba_V->data[j*U1ba_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(54,39)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(73,57)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(161,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(164,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj+s] (166:15) and U1ba_V->data[s*U1ba_V->ncol+j] (166:15)
      remark #15346: vector dependence: assumed ANTI dependence between U1ba_V->data[s*U1ba_V->ncol+j] (166:15) and A_cm[j*nadj+s] (166:15)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(36,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(39,30) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(55,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(57,31) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(65,29)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(68,8)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(70,36) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(77,29)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(79,43)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(81,39) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(114,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(117,43) ]

         LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(118,36)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_recongrad.cpp(174,16)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type>::_M_emplace_hint_unique<const std::piecewise_construct_t &, std::tuple<const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &>, std::tuple<>>(std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type>::const_iterator, const std::piecewise_construct_t &, std::tuple<const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &> &&, std::tuple<> &&)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_tree.h(2426,56)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_tree.h(2426,56)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_tree.h(2426,56)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type, std::_Select1st<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type>, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_compare, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::_Pair_alloc_type>::_M_emplace_hint_unique<const std::piecewise_construct_t &, std::tuple<const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &>, std::tuple<>>(std::_Rb_tree<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type, std::_Select1st<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type>, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_compare, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type, std::_Select1st<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type>, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_compare, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::_Pair_alloc_type>::const_iterator, const std::piecewise_construct_t &, std::tuple<const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &> &&, std::tuple<> &&)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_tree.h(2426,56)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_tree.h(2426,56)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_tree.h(2426,56)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::~map(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type, std::_Select1st<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type>, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_compare, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type, std::_Select1st<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type>, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_compare, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type, std::_Select1st<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type>, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_compare, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_Vrt_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(222,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(223,29)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(253,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(255,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U1c6_V->data[j*U1c6_V->ncol+q] (22:13) and U1c6_V->data[q*U1c6_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U1c6_V->data[q*U1c6_V->ncol+j] (22:13) and U1c6_V->data[j*U1c6_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(372,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between A_cm_el[j*nadj_el+q] (376:20) and U1ce_V->data[q*U1ce_V->ncol] (22:13)
   remark #15346: vector dependence: assumed OUTPUT dependence between U1ce_V->data[q*U1ce_V->ncol] (22:13) and A_cm_el[j*nadj_el+q] (376:20)

   LOOP BEGIN at ../src/adapt_recongrad.cpp(374,16)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(414,11)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(416,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj_tot+s] (418:19) and U1c6_V->data[s*U1c6_V->ncol+j] (418:19)
      remark #15346: vector dependence: assumed ANTI dependence between U1c6_V->data[s*U1c6_V->ncol+j] (418:19) and A_cm[j*nadj_tot+s] (418:19)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(233,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(237,33) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(264,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(266,31) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(279,12)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(281,42) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(288,47)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(290,43) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(322,20)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(324,49) ]
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(390,12)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(393,32) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(441,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(443,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(444,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(445,15)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_Vrt_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(222,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(223,29)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(253,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(255,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U1c6_V->data[j*U1c6_V->ncol+q] (22:13) and U1c6_V->data[q*U1c6_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U1c6_V->data[q*U1c6_V->ncol+j] (22:13) and U1c6_V->data[j*U1c6_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(372,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between A_cm_el[j*nadj_el+q] (376:20) and U1ce_V->data[q*U1ce_V->ncol] (22:13)
   remark #15346: vector dependence: assumed OUTPUT dependence between U1ce_V->data[q*U1ce_V->ncol] (22:13) and A_cm_el[j*nadj_el+q] (376:20)

   LOOP BEGIN at ../src/adapt_recongrad.cpp(374,16)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(414,11)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(416,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj_tot+s] (418:19) and U1c6_V->data[s*U1c6_V->ncol+j] (418:19)
      remark #15346: vector dependence: assumed ANTI dependence between U1c6_V->data[s*U1c6_V->ncol+j] (418:19) and A_cm[j*nadj_tot+s] (418:19)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(233,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(237,33) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(264,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(266,31) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(279,12)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(281,42) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(288,47)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(290,43) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(322,20)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(324,49) ]
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(390,12)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(393,32) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(441,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(443,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(444,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(445,15)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_Vrt_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(222,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(223,29)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(253,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(255,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U1c6_V->data[j*U1c6_V->ncol+q] (22:13) and U1c6_V->data[q*U1c6_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U1c6_V->data[q*U1c6_V->ncol+j] (22:13) and U1c6_V->data[j*U1c6_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(372,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between A_cm_el[j*nadj_el+q] (376:20) and U1ce_V->data[q*U1ce_V->ncol] (22:13)
   remark #15346: vector dependence: assumed OUTPUT dependence between U1ce_V->data[q*U1ce_V->ncol] (22:13) and A_cm_el[j*nadj_el+q] (376:20)

   LOOP BEGIN at ../src/adapt_recongrad.cpp(374,16)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(414,11)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(416,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj_tot+s] (418:19) and U1c6_V->data[s*U1c6_V->ncol+j] (418:19)
      remark #15346: vector dependence: assumed ANTI dependence between U1c6_V->data[s*U1c6_V->ncol+j] (418:19) and A_cm[j*nadj_tot+s] (418:19)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(233,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(237,33) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(264,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(266,31) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(279,12)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(281,42) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(288,47)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(290,43) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(322,20)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(324,49) ]
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(390,12)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(393,32) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(441,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(443,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(444,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(445,15)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_Vrt_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(222,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(223,29)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(253,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(255,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U1c6_V->data[j*U1c6_V->ncol+q] (22:13) and U1c6_V->data[q*U1c6_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U1c6_V->data[q*U1c6_V->ncol+j] (22:13) and U1c6_V->data[j*U1c6_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(372,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between A_cm_el[j*nadj_el+q] (376:20) and U1ce_V->data[q*U1ce_V->ncol] (22:13)
   remark #15346: vector dependence: assumed OUTPUT dependence between U1ce_V->data[q*U1ce_V->ncol] (22:13) and A_cm_el[j*nadj_el+q] (376:20)

   LOOP BEGIN at ../src/adapt_recongrad.cpp(374,16)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(414,11)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(416,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj_tot+s] (418:19) and U1c6_V->data[s*U1c6_V->ncol+j] (418:19)
      remark #15346: vector dependence: assumed ANTI dependence between U1c6_V->data[s*U1c6_V->ncol+j] (418:19) and A_cm[j*nadj_tot+s] (418:19)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(233,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(237,33) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(264,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(266,31) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(279,12)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(281,42) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(288,47)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(290,43) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(322,20)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(324,49) ]
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(390,12)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(393,32) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(441,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(443,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(444,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(445,15)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_Vrt_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(222,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(223,29)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(253,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(255,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U1c6_V->data[j*U1c6_V->ncol+q] (22:13) and U1c6_V->data[q*U1c6_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U1c6_V->data[q*U1c6_V->ncol+j] (22:13) and U1c6_V->data[j*U1c6_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(263,39)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(283,61)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(372,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between A_cm_el[j*nadj_el+q] (376:20) and U1ce_V->data[q*U1ce_V->ncol] (22:13)
   remark #15346: vector dependence: assumed OUTPUT dependence between U1ce_V->data[q*U1ce_V->ncol] (22:13) and A_cm_el[j*nadj_el+q] (376:20)

   LOOP BEGIN at ../src/adapt_recongrad.cpp(374,16)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(414,11)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(416,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj_tot+s] (418:19) and U1c6_V->data[s*U1c6_V->ncol+j] (418:19)
      remark #15346: vector dependence: assumed ANTI dependence between U1c6_V->data[s*U1c6_V->ncol+j] (418:19) and A_cm[j*nadj_tot+s] (418:19)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(233,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(237,33) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(264,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(266,31) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(279,12)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(281,42) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(288,47)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(290,43) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(322,20)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(324,49) ]
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(390,12)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(393,32) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(441,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(443,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(444,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(445,15)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(448,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::operator[](std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, const std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_HO_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_recongrad.cpp(1585,13)
<Multiversioned v1>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
      remark #15389: vectorization support: reference U207_V->data[q*U207_V->ncol+g] has unaligned access   [ ../src/adapt_array.h(22,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15416: vectorization support: non-unit strided store was generated for the variable <U207_V->data[g*U207_V->ncol+q]>, stride is unknown to compiler   [ ../src/adapt_array.h(22,13) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.259
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 3.370 
      remark #15478: estimated potential speedup: 1.530 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference U207_V->data[q*U207_V->ncol+g] has unaligned access   [ ../src/adapt_array.h(22,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.383
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1585,13)
<Multiversioned v2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U207_V->data[g*U207_V->ncol+q] (22:13) and U207_V->data[q*U207_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U207_V->data[q*U207_V->ncol+g] (22:13) and U207_V->data[g*U207_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1651,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Multiversioned v1>
      remark #15389: vectorization support: reference U207_V->data[s*U207_V->ncol+g] has unaligned access   [ ../src/adapt_array.h(26,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15416: vectorization support: non-unit strided store was generated for the variable <A_cm[g*Ndata+s]>, stride is unknown to compiler   [ ../src/adapt_recongrad.cpp(1655,21) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.130
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 2.870 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1682,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1684,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U20e_V->data[g*U20e_V->ncol+q] (22:13) and U20e_V->data[q*U20e_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U20e_V->data[q*U20e_V->ncol+g] (22:13) and U20e_V->data[g*U20e_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1719,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1721,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[g*Ndata+s] (1723:21) and U20e_V->data[s*U20e_V->ncol+g] (1723:21)
      remark #15346: vector dependence: assumed ANTI dependence between U20e_V->data[s*U20e_V->ncol+g] (1723:21) and A_cm[g*Ndata+s] (1723:21)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(1165,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1169,29) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1174,35)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1176,32) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1189,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1191,41) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1200,44)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1202,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1228,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1230,46) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1315,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1317,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1327,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1329,48) ]

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1336,53)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1338,55) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1363,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1365,54) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1444,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1446,48) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1458,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1460,59) ]

            LOOP BEGIN at ../src/adapt_recongrad.cpp(1467,64)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1469,66) ]
            LOOP END

            LOOP BEGIN at ../src/adapt_recongrad.cpp(1494,33)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1496,62) ]
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1600,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1643,43) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1696,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1711,43) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_HO_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_recongrad.cpp(1585,13)
<Multiversioned v1>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
      remark #15388: vectorization support: reference U207_V->data[q*U207_V->ncol+g] has aligned access   [ ../src/adapt_array.h(22,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <U207_V->data[g*U207_V->ncol+q]>, stride is unknown to compiler   [ ../src/adapt_array.h(22,13) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.778
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 1.100 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1585,13)
<Multiversioned v2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U207_V->data[g*U207_V->ncol+q] (22:13) and U207_V->data[q*U207_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U207_V->data[q*U207_V->ncol+g] (22:13) and U207_V->data[g*U207_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1651,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference U207_V->data[s*U207_V->ncol+g] has unaligned access   [ ../src/adapt_array.h(26,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.326
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Multiversioned v1>
      remark #15388: vectorization support: reference U207_V->data[s*U207_V->ncol+g] has aligned access   [ ../src/adapt_array.h(26,21) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <A_cm[g*Ndata+s]>, stride is unknown to compiler   [ ../src/adapt_recongrad.cpp(1655,21) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.150 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference U207_V->data[s*U207_V->ncol+g] has unaligned access   [ ../src/adapt_array.h(26,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.326
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1682,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1684,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U20e_V->data[g*U20e_V->ncol+q] (22:13) and U20e_V->data[q*U20e_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U20e_V->data[q*U20e_V->ncol+g] (22:13) and U20e_V->data[g*U20e_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1719,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1721,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[g*Ndata+s] (1723:21) and U20e_V->data[s*U20e_V->ncol+g] (1723:21)
      remark #15346: vector dependence: assumed ANTI dependence between U20e_V->data[s*U20e_V->ncol+g] (1723:21) and A_cm[g*Ndata+s] (1723:21)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(1165,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1169,29) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1174,35)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1176,32) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1189,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1191,41) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1200,44)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1202,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1228,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1230,46) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1315,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1317,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1327,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1329,48) ]

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1336,53)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1338,55) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1363,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1365,54) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1444,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1446,48) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1458,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1460,59) ]

            LOOP BEGIN at ../src/adapt_recongrad.cpp(1467,64)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1469,66) ]
            LOOP END

            LOOP BEGIN at ../src/adapt_recongrad.cpp(1494,33)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1496,62) ]
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1600,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1643,43) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1696,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1711,43) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_HO_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_recongrad.cpp(1585,13)
<Multiversioned v1>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
      remark #15388: vectorization support: reference U207_V->data[q*U207_V->ncol+g] has aligned access   [ ../src/adapt_array.h(22,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <U207_V->data[g*U207_V->ncol+q]>, stride is unknown to compiler   [ ../src/adapt_array.h(22,13) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.778
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 1.100 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1585,13)
<Multiversioned v2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U207_V->data[g*U207_V->ncol+q] (22:13) and U207_V->data[q*U207_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U207_V->data[q*U207_V->ncol+g] (22:13) and U207_V->data[g*U207_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1651,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Peeled loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Multiversioned v1>
      remark #15388: vectorization support: reference U207_V->data[s*U207_V->ncol+g] has aligned access   [ ../src/adapt_array.h(26,21) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <A_cm[g*Ndata+s]>, stride is unknown to compiler   [ ../src/adapt_recongrad.cpp(1655,21) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.150 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1682,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1684,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U20e_V->data[g*U20e_V->ncol+q] (22:13) and U20e_V->data[q*U20e_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U20e_V->data[q*U20e_V->ncol+g] (22:13) and U20e_V->data[g*U20e_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1719,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1721,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[g*Ndata+s] (1723:21) and U20e_V->data[s*U20e_V->ncol+g] (1723:21)
      remark #15346: vector dependence: assumed ANTI dependence between U20e_V->data[s*U20e_V->ncol+g] (1723:21) and A_cm[g*Ndata+s] (1723:21)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(1165,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1169,29) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1174,35)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1176,32) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1189,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1191,41) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1200,44)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1202,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1228,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1230,46) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1315,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1317,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1327,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1329,48) ]

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1336,53)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1338,55) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1363,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1365,54) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1444,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1446,48) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1458,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1460,59) ]

            LOOP BEGIN at ../src/adapt_recongrad.cpp(1467,64)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1469,66) ]
            LOOP END

            LOOP BEGIN at ../src/adapt_recongrad.cpp(1494,33)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1496,62) ]
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1600,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1643,43) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1696,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1711,43) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_HO_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_recongrad.cpp(1585,13)
<Multiversioned v1>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
      remark #15388: vectorization support: reference U207_V->data[q*U207_V->ncol+g] has aligned access   [ ../src/adapt_array.h(22,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <U207_V->data[g*U207_V->ncol+q]>, stride is unknown to compiler   [ ../src/adapt_array.h(22,13) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.778
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 1.240 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1585,13)
<Multiversioned v2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1587,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U207_V->data[g*U207_V->ncol+q] (22:13) and U207_V->data[q*U207_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U207_V->data[q*U207_V->ncol+g] (22:13) and U207_V->data[g*U207_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1651,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Multiversioned v1>
      remark #15389: vectorization support: reference U207_V->data[s*U207_V->ncol+g] has unaligned access   [ ../src/adapt_array.h(26,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <A_cm[g*Ndata+s]>, stride is unknown to compiler   [ ../src/adapt_recongrad.cpp(1655,21) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.107
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 3.500 
      remark #15478: estimated potential speedup: 1.250 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1653,17)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1682,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1684,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U20e_V->data[g*U20e_V->ncol+q] (22:13) and U20e_V->data[q*U20e_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U20e_V->data[q*U20e_V->ncol+g] (22:13) and U20e_V->data[g*U20e_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(1719,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1721,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[g*Ndata+s] (1723:21) and U20e_V->data[s*U20e_V->ncol+g] (1723:21)
      remark #15346: vector dependence: assumed ANTI dependence between U20e_V->data[s*U20e_V->ncol+g] (1723:21) and A_cm[g*Ndata+s] (1723:21)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(1165,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1169,29) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1174,35)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1176,32) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1189,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1191,41) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1200,44)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1202,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1228,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1230,46) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1315,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1317,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1327,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1329,48) ]

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1336,53)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1338,55) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1363,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1365,54) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1444,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1446,48) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1458,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1460,59) ]

            LOOP BEGIN at ../src/adapt_recongrad.cpp(1467,64)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1469,66) ]
            LOOP END

            LOOP BEGIN at ../src/adapt_recongrad.cpp(1494,33)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1496,62) ]
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1600,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1643,43) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1696,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1711,43) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::operator[](std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, const std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::clear(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_vector.h(1387,9)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::push_back(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, const std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::value_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(82,23) inlined into /usr/include/c++/8/bits/stl_vector.h(1086,4)
   remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(82,23) inlined into /usr/include/c++/8/bits/stl_vector.h(1086,4)
   remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_vector.h(1086,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer>(std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer, std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::operator[](std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, const std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::operator[](std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::find(std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(1170,26)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::find(std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, const std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(1170,26)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::clear(std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(1134,14)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::clear(std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(1134,14)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::~map(std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::~map(std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::set<int, std::less<int>, std::allocator<int>>::~set(std::set<int, std::less<int>, std::allocator<int>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_set.h(282,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_M_erase(std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type> *, std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_LS_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_recongrad.cpp(2240,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2242,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U248_V->data[g*U248_V->ncol+q] (22:13) and U248_V->data[q*U248_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U248_V->data[q*U248_V->ncol+g] (22:13) and U248_V->data[g*U248_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2306,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2308,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[g*Ndata+s] (2310:21) and U248_V->data[s*U248_V->ncol+g] (2310:21)
      remark #15346: vector dependence: assumed ANTI dependence between U248_V->data[s*U248_V->ncol+g] (2310:21) and A_cm[g*Ndata+s] (2310:21)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2340,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2342,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U250_V->data[g*U250_V->ncol+q] (22:13) and U250_V->data[q*U250_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U250_V->data[q*U250_V->ncol+g] (22:13) and U250_V->data[g*U250_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2377,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2379,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[g*Ndata+s] (2381:21) and U250_V->data[s*U250_V->ncol+g] (2381:21)
      remark #15346: vector dependence: assumed ANTI dependence between U250_V->data[s*U250_V->ncol+g] (2381:21) and A_cm[g*Ndata+s] (2381:21)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(1814,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1818,29) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1822,35)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1824,32) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1837,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1839,41) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1847,44)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1849,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1875,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1877,46) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1961,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1963,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1973,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1975,48) ]

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1982,53)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1984,55) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2009,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2011,54) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2099,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2101,48) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2113,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2115,59) ]

            LOOP BEGIN at ../src/adapt_recongrad.cpp(2122,64)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2124,66) ]
            LOOP END

            LOOP BEGIN at ../src/adapt_recongrad.cpp(2149,33)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2151,62) ]
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2255,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2298,43) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2354,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2369,43) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_LS_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_recongrad.cpp(2240,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2242,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U248_V->data[g*U248_V->ncol+q] (22:13) and U248_V->data[q*U248_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U248_V->data[q*U248_V->ncol+g] (22:13) and U248_V->data[g*U248_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2306,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2308,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[g*Ndata+s] (2310:21) and U248_V->data[s*U248_V->ncol+g] (2310:21)
      remark #15346: vector dependence: assumed ANTI dependence between U248_V->data[s*U248_V->ncol+g] (2310:21) and A_cm[g*Ndata+s] (2310:21)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2340,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2342,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U250_V->data[g*U250_V->ncol+q] (22:13) and U250_V->data[q*U250_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U250_V->data[q*U250_V->ncol+g] (22:13) and U250_V->data[g*U250_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2377,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2379,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[g*Ndata+s] (2381:21) and U250_V->data[s*U250_V->ncol+g] (2381:21)
      remark #15346: vector dependence: assumed ANTI dependence between U250_V->data[s*U250_V->ncol+g] (2381:21) and A_cm[g*Ndata+s] (2381:21)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(1814,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1818,29) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1822,35)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1824,32) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1837,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1839,41) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1847,44)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1849,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1875,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1877,46) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1961,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1963,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1973,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1975,48) ]

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1982,53)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1984,55) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2009,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2011,54) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2099,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2101,48) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2113,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2115,59) ]

            LOOP BEGIN at ../src/adapt_recongrad.cpp(2122,64)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2124,66) ]
            LOOP END

            LOOP BEGIN at ../src/adapt_recongrad.cpp(2149,33)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2151,62) ]
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2255,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2298,43) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2354,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2369,43) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_LS_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_recongrad.cpp(2240,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2242,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U248_V->data[g*U248_V->ncol+q] (22:13) and U248_V->data[q*U248_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U248_V->data[q*U248_V->ncol+g] (22:13) and U248_V->data[g*U248_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2306,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2308,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[g*Ndata+s] (2310:21) and U248_V->data[s*U248_V->ncol+g] (2310:21)
      remark #15346: vector dependence: assumed ANTI dependence between U248_V->data[s*U248_V->ncol+g] (2310:21) and A_cm[g*Ndata+s] (2310:21)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2340,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2342,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U250_V->data[g*U250_V->ncol+q] (22:13) and U250_V->data[q*U250_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U250_V->data[q*U250_V->ncol+g] (22:13) and U250_V->data[g*U250_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2377,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2379,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[g*Ndata+s] (2381:21) and U250_V->data[s*U250_V->ncol+g] (2381:21)
      remark #15346: vector dependence: assumed ANTI dependence between U250_V->data[s*U250_V->ncol+g] (2381:21) and A_cm[g*Ndata+s] (2381:21)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(1814,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1818,29) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1822,35)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1824,32) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(1837,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1839,41) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1847,44)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1849,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1875,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1877,46) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1961,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1963,40) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(1973,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1975,48) ]

         LOOP BEGIN at ../src/adapt_recongrad.cpp(1982,53)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(1984,55) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2009,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2011,54) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2099,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2101,48) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2113,25)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2115,59) ]

            LOOP BEGIN at ../src/adapt_recongrad.cpp(2122,64)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2124,66) ]
            LOOP END

            LOOP BEGIN at ../src/adapt_recongrad.cpp(2149,33)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2151,62) ]
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2255,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2298,43) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2354,44)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2369,43) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2449,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2459,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2460,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2461,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2476,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2478,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U25b_V->data[j*U25b_V->ncol+q] (22:13) and U25b_V->data[q*U25b_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U25b_V->data[q*U25b_V->ncol+j] (22:13) and U25b_V->data[j*U25b_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2554,42)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2566,39)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2605,44)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2672,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2674,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj+s] (2676:15) and U25b_V->data[s*U25b_V->ncol+j] (2676:15)
      remark #15346: vector dependence: assumed ANTI dependence between U25b_V->data[s*U25b_V->ncol+j] (2676:15) and A_cm[j*nadj+s] (2676:15)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(2466,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2469,30) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2486,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2488,31) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2498,8)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2500,38) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2508,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2510,52) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2545,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2547,45) ]
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2449,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2459,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2460,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2461,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2476,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2478,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U25b_V->data[j*U25b_V->ncol+q] (22:13) and U25b_V->data[q*U25b_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U25b_V->data[q*U25b_V->ncol+j] (22:13) and U25b_V->data[j*U25b_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2554,42)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2566,39)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2605,44)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2672,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2674,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj+s] (2676:15) and U25b_V->data[s*U25b_V->ncol+j] (2676:15)
      remark #15346: vector dependence: assumed ANTI dependence between U25b_V->data[s*U25b_V->ncol+j] (2676:15) and A_cm[j*nadj+s] (2676:15)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(2466,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2469,30) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2486,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2488,31) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2498,8)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2500,38) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2508,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2510,52) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2545,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2547,45) ]
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2449,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2459,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2460,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2461,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2476,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2478,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U25b_V->data[j*U25b_V->ncol+q] (22:13) and U25b_V->data[q*U25b_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U25b_V->data[q*U25b_V->ncol+j] (22:13) and U25b_V->data[j*U25b_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2554,42)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2566,39)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2605,44)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2672,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2674,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj+s] (2676:15) and U25b_V->data[s*U25b_V->ncol+j] (2676:15)
      remark #15346: vector dependence: assumed ANTI dependence between U25b_V->data[s*U25b_V->ncol+j] (2676:15) and A_cm[j*nadj+s] (2676:15)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(2466,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2469,30) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2486,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2488,31) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2498,8)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2500,38) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2508,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2510,52) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2545,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2547,45) ]
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2449,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2459,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2460,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2461,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2476,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2478,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U25b_V->data[j*U25b_V->ncol+q] (22:13) and U25b_V->data[q*U25b_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U25b_V->data[q*U25b_V->ncol+j] (22:13) and U25b_V->data[j*U25b_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2554,42)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2566,39)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2605,44)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2672,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2674,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj+s] (2676:15) and U25b_V->data[s*U25b_V->ncol+j] (2676:15)
      remark #15346: vector dependence: assumed ANTI dependence between U25b_V->data[s*U25b_V->ncol+j] (2676:15) and A_cm[j*nadj+s] (2676:15)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(2466,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2469,30) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2486,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2488,31) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2498,8)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2500,38) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2508,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2510,52) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2545,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2547,45) ]
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_US3D(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2449,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2459,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2460,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2461,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2476,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2478,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U25b_V->data[j*U25b_V->ncol+q] (22:13) and U25b_V->data[q*U25b_V->ncol+j] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U25b_V->data[q*U25b_V->ncol+j] (22:13) and U25b_V->data[j*U25b_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2485,39)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2554,42)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2566,39)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(2605,44)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(2672,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2674,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[j*nadj+s] (2676:15) and U25b_V->data[s*U25b_V->ncol+j] (2676:15)
      remark #15346: vector dependence: assumed ANTI dependence between U25b_V->data[s*U25b_V->ncol+j] (2676:15) and A_cm[j*nadj+s] (2676:15)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(2466,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2469,30) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2486,34)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2488,31) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2498,8)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2500,38) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2508,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2510,52) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2545,16)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2547,45) ]
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::_M_erase_at_end(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_vector.h(1659,6)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/char_traits.h(233,7) inlined into /usr/include/c++/8/bits/char_traits.h(327,6)
   remark #15523: loop was not vectorized: loop control variable __s was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/char_traits.h(165,7) inlined into /usr/include/c++/8/bits/char_traits.h(328,11)
   remark #15523: loop was not vectorized: loop control variable __i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::~vector(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_vector.h(568,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_US3D_LargeStencil(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_recongrad.cpp(2993,34)
   remark #26015: Exception can be thrown by the call to std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::operator[](std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, const std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type &)   [ ../src/adapt_recongrad.cpp(2995,63) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2995,63) ]
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(3036,10)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(3038,23)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U271_V->data[g*U271_V->ncol+q] (22:13) and U271_V->data[q*U271_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U271_V->data[q*U271_V->ncol+g] (22:13) and U271_V->data[g*U271_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(3078,10)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(3080,14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[g*Ndata+s] (3082:18) and U271_V->data[s*U271_V->ncol+g] (3082:18)
      remark #15346: vector dependence: assumed ANTI dependence between U271_V->data[s*U271_V->ncol+g] (3082:18) and A_cm[g*Ndata+s] (3082:18)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(2763,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2770,30) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2774,36)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2776,33) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2791,10)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2793,42) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2803,45)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2805,41) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2834,18)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2836,47) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2877,18)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2879,49) ]

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2888,54)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2890,56) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2918,26)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2920,55) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2955,26)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2957,60) ]

            LOOP BEGIN at ../src/adapt_recongrad.cpp(2966,65)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2968,67) ]
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(3051,41)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(3059,28) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3101,22)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3102,22)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3103,5)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3106,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_US3D_LargeStencil(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_recongrad.cpp(2993,34)
   remark #26015: Exception can be thrown by the call to std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::operator[](std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, const std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type &)   [ ../src/adapt_recongrad.cpp(2995,63) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2995,63) ]
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(3036,10)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(3038,23)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U271_V->data[g*U271_V->ncol+q] (22:13) and U271_V->data[q*U271_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U271_V->data[q*U271_V->ncol+g] (22:13) and U271_V->data[g*U271_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(3078,10)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(3080,14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[g*Ndata+s] (3082:18) and U271_V->data[s*U271_V->ncol+g] (3082:18)
      remark #15346: vector dependence: assumed ANTI dependence between U271_V->data[s*U271_V->ncol+g] (3082:18) and A_cm[g*Ndata+s] (3082:18)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(2763,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2770,30) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2774,36)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2776,33) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2791,10)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2793,42) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2803,45)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2805,41) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2834,18)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2836,47) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2877,18)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2879,49) ]

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2888,54)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2890,56) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2918,26)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2920,55) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2955,26)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2957,60) ]

            LOOP BEGIN at ../src/adapt_recongrad.cpp(2966,65)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2968,67) ]
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(3051,41)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(3059,28) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3101,22)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3102,22)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3103,5)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3106,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_LSQ_US3D_LargeStencil(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_recongrad.cpp(2993,34)
   remark #26015: Exception can be thrown by the call to std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::operator[](std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, const std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type &)   [ ../src/adapt_recongrad.cpp(2995,63) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2995,63) ]
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(3036,10)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(3038,23)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U271_V->data[g*U271_V->ncol+q] (22:13) and U271_V->data[q*U271_V->ncol+g] (22:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between U271_V->data[q*U271_V->ncol+g] (22:13) and U271_V->data[g*U271_V->ncol+q] (22:13)
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(3078,10)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_recongrad.cpp(3080,14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A_cm[g*Ndata+s] (3082:18) and U271_V->data[s*U271_V->ncol+g] (3082:18)
      remark #15346: vector dependence: assumed ANTI dependence between U271_V->data[s*U271_V->ncol+g] (3082:18) and A_cm[g*Ndata+s] (3082:18)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(2763,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2770,30) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2774,36)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2776,33) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(2791,10)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2793,42) ]

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2803,45)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2805,41) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2834,18)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2836,47) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_recongrad.cpp(2877,18)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2879,49) ]

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2888,54)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2890,56) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2918,26)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2920,55) ]
         LOOP END

         LOOP BEGIN at ../src/adapt_recongrad.cpp(2955,26)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2957,60) ]

            LOOP BEGIN at ../src/adapt_recongrad.cpp(2966,65)
               remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(2968,67) ]
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_recongrad.cpp(3051,41)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(3059,28) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3101,22)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3102,22)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3103,5)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3106,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type, std::_Select1st<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type>, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_compare, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::_Pair_alloc_type>::find(std::_Rb_tree<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type, std::_Select1st<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type>, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_compare, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type, std::_Select1st<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type>, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_compare, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::_Pair_alloc_type>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_tree.h(2547,59)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type>::find(std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_tree.h(2547,59)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type, std::_Select1st<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type>, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_compare, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type, std::_Select1st<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type>, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_compare, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type, std::_Select1st<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type>, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_compare, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type>::~_Rb_tree(std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_tree.h(973,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type>::~_Rb_tree(std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_tree.h(973,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::~_Rb_tree(std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_tree.h(973,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_MGG(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(3256,47)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(3139,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(3143,17) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3184,13)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(3198,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(3202,37) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(3218,14)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(3220,42) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_MGG(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(3256,47)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(3139,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(3143,17) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3184,13)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(3198,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(3202,37) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(3218,14)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(3220,42) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputedUdx_MGG(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Partition *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, Mesh_Topology *, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, MPI_Comm) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_recongrad.cpp(3256,47)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_recongrad.cpp(3139,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(3143,17) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3184,13)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at ../src/adapt_recongrad.cpp(3198,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(3202,37) ]

   LOOP BEGIN at ../src/adapt_recongrad.cpp(3218,14)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_recongrad.cpp(3220,42) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_recongrad.cpp(3327,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_Rb_tree(std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1851,6) inlined into /usr/include/c++/8/bits/stl_tree.h(948,16)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(114,7) inlined into /usr/include/c++/8/bits/stl_tree.h(948,16)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(128,7) inlined into /usr/include/c++/8/bits/stl_tree.h(948,16)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_M_copy<std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_Alloc_node>(std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_Const_Link_type, std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_Base_ptr, std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_Alloc_node &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1851,6)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::operator[](std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>> *, const std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::key_type, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::value_type, std::_Select1st<std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::value_type>, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::key_compare, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::_Pair_alloc_type>::_M_drop_node(std::_Rb_tree<std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::key_type, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::value_type, std::_Select1st<std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::value_type>, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::key_compare, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::key_type, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::value_type, std::_Select1st<std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::value_type>, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::key_compare, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::_Pair_alloc_type>::_Link_type) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_tree.h(659,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::operator[](std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *, const std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::key_type, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::value_type, std::_Select1st<std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::value_type>, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::key_compare, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::key_type, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::value_type, std::_Select1st<std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::value_type>, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::key_compare, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::key_type, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::value_type, std::_Select1st<std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::value_type>, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::key_compare, std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_tree.h(1882,4)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::~map(std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>>::~map(std::map<int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::~map(std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.857
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.500
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.500
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type &) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.357
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.920 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::_M_default_initialize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::_M_default_initialize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::_M_default_initialize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::_M_default_initialize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::_M_default_initialize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(1491,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================
