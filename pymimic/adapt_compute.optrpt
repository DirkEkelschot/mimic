Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -I/nobackupp19/dekelsch/Software/ParMmg/build/Mmg-prefix/src/Mmg-build/include -I/nobackupp19/dekelsch/Software/ParMmg/build/include -I/nobackupp19/dekelsch/parmetis-4.0.3/parmetis-install/include -I/nobackupp19/dekelsch/parmetis-4.0.3/metis/metis-install/include -I/nobackupp19/dekelsch/boost_1_71_0/boost-install/include -I/home1/dekelsch/Software/tinyxml -I/nobackupp19/dekelsch/CGNS-3.3.0/src/install/include -I/home1/dekelsch/local/lib/python3.12/site-packages/numpy/_core/include -I/home1/dekelsch/local/lib/python3.12/site-packages/mpi4py/include -I/home1/dekelsch/local/include/python3.12/ -std=c++17 -g -DMPI_NO_CPPBIND -fPIC -lm -lpthread -ldl -lutil -L/home1/dekelsch/local/lib/python3.12/ -O2 -Wall -axAVX,CORE-AVX2,CORE-AVX512 -qopt-report-phase=vec -qopt-report=5 -o PartiClass.so -L/nobackupp19/dekelsch/Software/ParMmg/build/Mmg-prefix/src/Mmg-build/lib -L/nobackupp19/dekelsch/Software/ParMmg/build/lib -L/nobackupp19/dekelsch/parmetis-4.0.3/parmetis-install/lib -L/nobackupp19/dekelsch/parmetis-4.0.3/metis/metis-install/lib -L/nobackupp19/dekelsch/boost_1_71_0/boost-install/stage/lib -L/home1/dekelsch/Software/tinyxml -L/nobackupp19/dekelsch/CGNS-3.3.0/src/install/lib -shared -lm -lpthread -ldl -lutil -L/home1/dekelsch/local/lib/python3.12/ -lmpi -lparmetis -lmetis -lhdf5 -mkl -lparmmg -lmmg -lcgns -lmpi

Begin optimization report for: ComputeTetVolume(std::vector<double, std::allocator<double>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(280,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(281,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(282,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(283,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(294,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(300,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(306,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: ComputeTetVolume(std::vector<double, std::allocator<double>> *) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(280,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(281,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(282,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(283,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(294,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(300,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(306,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: ComputeTetVolume(std::vector<double, std::allocator<double>> *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(280,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(281,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(282,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(283,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(294,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(300,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(306,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumeTetCell(std::vector<double, std::allocator<double>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(441,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(442,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(443,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(444,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(454,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(459,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(464,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(470,31)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumeTetCell(std::vector<double, std::allocator<double>> *) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(441,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(442,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(443,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(444,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(454,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(459,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(464,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(470,31)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumeTetCell(std::vector<double, std::allocator<double>> *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(441,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(442,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(443,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(444,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(454,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(459,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(464,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(470,31)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumePrismCell(std::vector<double, std::allocator<double>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(488,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(489,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(490,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(491,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(492,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(493,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: ComputeCenterCoord(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>> *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(551,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
      remark #15389: vectorization support: reference N[i] has unaligned access   [ ../src/adapt_compute.cpp(560,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 1.650 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(564,5)
   remark #15389: vectorization support: reference ref[_2] has unaligned access
   remark #15388: vectorization support: reference at (564:18) has aligned access   [ ../src/adapt_compute.cpp(564,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 5.330 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(585,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between N[i] (587:9) and __p1->_M_start[2] (591:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between __p1->_M_start[2] (591:10) and N[i] (587:9)
LOOP END
===========================================================================

Begin optimization report for: ComputeCenterCoord(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>> *, int) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(551,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
      remark #15389: vectorization support: reference N[i] has unaligned access   [ ../src/adapt_compute.cpp(560,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 1.650 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(564,5)
   remark #15389: vectorization support: reference ref[_2] has unaligned access
   remark #15388: vectorization support: reference at (564:18) has aligned access   [ ../src/adapt_compute.cpp(564,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 5.330 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(585,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between N[i] (587:9) and V->_M_start[2] (591:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between V->_M_start[2] (591:10) and N[i] (587:9)
LOOP END
===========================================================================

Begin optimization report for: ComputeCenterCoord(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>> *, int) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(551,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
      remark #15389: vectorization support: reference N[i] has unaligned access   [ ../src/adapt_compute.cpp(560,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 1.650 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(564,5)
   remark #15389: vectorization support: reference ref[_2] has unaligned access
   remark #15388: vectorization support: reference at (564:18) has aligned access   [ ../src/adapt_compute.cpp(564,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 5.330 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(585,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between N[i] (587:9) and V->_M_start[2] (591:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between V->_M_start[2] (591:10) and N[i] (587:9)
LOOP END
===========================================================================

Begin optimization report for: ComputeCenterCoord(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>> *, int) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(551,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
      remark #15388: vectorization support: reference N[i] has aligned access   [ ../src/adapt_compute.cpp(560,9) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.490 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(564,5)
   remark #15389: vectorization support: reference ref[_2] has unaligned access
   remark #15388: vectorization support: reference at (564:18) has aligned access   [ ../src/adapt_compute.cpp(564,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 6
   remark #15309: vectorization support: normalized vectorization overhead 0.083
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.460 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(585,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between N[i] (587:9) and V->_M_start[2] (591:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between V->_M_start[2] (591:10) and N[i] (587:9)
LOOP END
===========================================================================

Begin optimization report for: ComputeCenterCoord(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>> *, int) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(551,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
      remark #15389: vectorization support: reference N[i] has unaligned access   [ ../src/adapt_compute.cpp(560,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(558,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(564,5)
   remark #15389: vectorization support: reference ref[_2] has unaligned access
   remark #15388: vectorization support: reference at (564:18) has aligned access   [ ../src/adapt_compute.cpp(564,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 6
   remark #15309: vectorization support: normalized vectorization overhead 0.083
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.460 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(585,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between N[i] (587:9) and V->_M_start[2] (591:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between V->_M_start[2] (591:10) and N[i] (587:9)
LOOP END
===========================================================================

Begin optimization report for: ComputeCentroidCoord(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>> *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(602,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(611,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(612,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(613,22) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.396
   remark #15355: vectorization support: at (611:10) is double type reduction   [ ../src/adapt_compute.cpp(611,10) ]
   remark #15355: vectorization support: at (612:10) is double type reduction   [ ../src/adapt_compute.cpp(612,10) ]
   remark #15355: vectorization support: at (613:10) is double type reduction   [ ../src/adapt_compute.cpp(613,10) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15452: unmasked strided loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 2.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
<Remainder loop for vectorization>
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.278
   remark #15355: vectorization support: at (611:10) is double type reduction   [ ../src/adapt_compute.cpp(611,10) ]
   remark #15355: vectorization support: at (612:10) is double type reduction   [ ../src/adapt_compute.cpp(612,10) ]
   remark #15355: vectorization support: at (613:10) is double type reduction   [ ../src/adapt_compute.cpp(613,10) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 2.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: ComputeCentroidCoord(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>> *, int) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(602,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(611,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(612,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(613,22) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.396
   remark #15355: vectorization support: at (611:10) is double type reduction   [ ../src/adapt_compute.cpp(611,10) ]
   remark #15355: vectorization support: at (612:10) is double type reduction   [ ../src/adapt_compute.cpp(612,10) ]
   remark #15355: vectorization support: at (613:10) is double type reduction   [ ../src/adapt_compute.cpp(613,10) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15452: unmasked strided loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 2.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
<Remainder loop for vectorization>
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.278
   remark #15355: vectorization support: at (611:10) is double type reduction   [ ../src/adapt_compute.cpp(611,10) ]
   remark #15355: vectorization support: at (612:10) is double type reduction   [ ../src/adapt_compute.cpp(612,10) ]
   remark #15355: vectorization support: at (613:10) is double type reduction   [ ../src/adapt_compute.cpp(613,10) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 2.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: ComputeCentroidCoord(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>> *, int) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(602,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(611,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(612,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(613,22) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.396
   remark #15355: vectorization support: at (611:10) is double type reduction   [ ../src/adapt_compute.cpp(611,10) ]
   remark #15355: vectorization support: at (612:10) is double type reduction   [ ../src/adapt_compute.cpp(612,10) ]
   remark #15355: vectorization support: at (613:10) is double type reduction   [ ../src/adapt_compute.cpp(613,10) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 2.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
<Remainder loop for vectorization>
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.861
   remark #15355: vectorization support: at (611:10) is double type reduction   [ ../src/adapt_compute.cpp(611,10) ]
   remark #15355: vectorization support: at (612:10) is double type reduction   [ ../src/adapt_compute.cpp(612,10) ]
   remark #15355: vectorization support: at (613:10) is double type reduction   [ ../src/adapt_compute.cpp(613,10) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 2.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: ComputeCentroidCoord(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>> *, int) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(602,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(611,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(612,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(613,22) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.646
   remark #15355: vectorization support: at (611:10) is double type reduction   [ ../src/adapt_compute.cpp(611,10) ]
   remark #15355: vectorization support: at (612:10) is double type reduction   [ ../src/adapt_compute.cpp(612,10) ]
   remark #15355: vectorization support: at (613:10) is double type reduction   [ ../src/adapt_compute.cpp(613,10) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 2.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
<Remainder loop for vectorization>
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.861
   remark #15355: vectorization support: at (611:10) is double type reduction   [ ../src/adapt_compute.cpp(611,10) ]
   remark #15355: vectorization support: at (612:10) is double type reduction   [ ../src/adapt_compute.cpp(612,10) ]
   remark #15355: vectorization support: at (613:10) is double type reduction   [ ../src/adapt_compute.cpp(613,10) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 2.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: ComputeCentroidCoord(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>> *, int) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(602,27)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(611,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(612,22) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(613,22) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.679
   remark #15355: vectorization support: at (611:10) is double type reduction   [ ../src/adapt_compute.cpp(611,10) ]
   remark #15355: vectorization support: at (612:10) is double type reduction   [ ../src/adapt_compute.cpp(612,10) ]
   remark #15355: vectorization support: at (613:10) is double type reduction   [ ../src/adapt_compute.cpp(613,10) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 10.500 
   remark #15478: estimated potential speedup: 1.930 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(608,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: ComputeDeterminantJ_tet(std::vector<double, std::allocator<double>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(5594,7) inlined into ../src/adapt_compute.cpp(984,51)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __result._M_current (5595:2) and __result._M_current (5596:15)
   remark #15346: vector dependence: assumed FLOW dependence between __result._M_current (5596:15) and __result._M_current (5595:2)
   remark #15346: vector dependence: assumed FLOW dependence between __result._M_current (5596:15) and __result._M_current (5595:2)
   remark #15346: vector dependence: assumed ANTI dependence between __result._M_current (5595:2) and __result._M_current (5596:15)
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(5594,7) inlined into ../src/adapt_compute.cpp(984,51)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: ComputeDeterminantJ_tet(std::vector<double, std::allocator<double>> *) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(5594,7) inlined into ../src/adapt_compute.cpp(984,51)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __result._M_current (5595:2) and __result._M_current (5596:15)
   remark #15346: vector dependence: assumed FLOW dependence between __result._M_current (5596:15) and __result._M_current (5595:2)
   remark #15346: vector dependence: assumed FLOW dependence between __result._M_current (5596:15) and __result._M_current (5595:2)
   remark #15346: vector dependence: assumed ANTI dependence between __result._M_current (5595:2) and __result._M_current (5596:15)
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(5594,7) inlined into ../src/adapt_compute.cpp(984,51)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: ComputeDeterminantJ_tet(std::vector<double, std::allocator<double>> *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(5594,7) inlined into ../src/adapt_compute.cpp(984,51)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __result._M_current (5595:2) and __result._M_current (5596:15)
   remark #15346: vector dependence: assumed FLOW dependence between __result._M_current (5596:15) and __result._M_current (5595:2)
   remark #15346: vector dependence: assumed FLOW dependence between __result._M_current (5596:15) and __result._M_current (5595:2)
   remark #15346: vector dependence: assumed ANTI dependence between __result._M_current (5595:2) and __result._M_current (5596:15)
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algo.h(5594,7) inlined into ../src/adapt_compute.cpp(984,51)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: ComputeDeterminantofJacobian(ParArray<int> *, Array<double> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1012,30)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1016,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1020:14) and xcn->data[i*xcn->ncol+2] (1022:14)
   remark #15346: vector dependence: assumed ANTI dependence between xcn->data[i*xcn->ncol+2] (1022:14) and P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1020:14)
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1014,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1025,41) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeJAtCenter(std::vector<double, std::allocator<double>> *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(628,5)
   remark #15389: vectorization support: reference J[i] has unaligned access   [ ../src/adapt_compute.cpp(630,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(628,5)
<Remainder loop for vectorization>
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference at (645:15) has unaligned access   [ ../src/adapt_compute.cpp(645,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(644,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(643,15) ]
   remark #15389: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(642,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.697
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 2.620 
   remark #15478: estimated potential speedup: 4.880 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
   remark #15389: vectorization support: reference at (645:15) has unaligned access   [ ../src/adapt_compute.cpp(645,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(644,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(643,15) ]
   remark #15388: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(642,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.452
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 2.620 
   remark #15478: estimated potential speedup: 4.880 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference at (645:15) has unaligned access   [ ../src/adapt_compute.cpp(645,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(644,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(643,15) ]
   remark #15389: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(642,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.697
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 2.620 
   remark #15478: estimated potential speedup: 4.880 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Peeled loop for vectorization, Distributed chunk1>
   remark #15389: vectorization support: reference at (687:15) has unaligned access   [ ../src/adapt_compute.cpp(687,15) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(685,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(686,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(693,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(694,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(695,27) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(697,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(698,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(699,26) ]
   remark #15389: vectorization support: reference at (701:27) has unaligned access   [ ../src/adapt_compute.cpp(701,27) ]
   remark #15389: vectorization support: reference at (702:27) has unaligned access   [ ../src/adapt_compute.cpp(702,27) ]
   remark #15389: vectorization support: reference at (703:27) has unaligned access   [ ../src/adapt_compute.cpp(703,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.610
   remark #15355: vectorization support: *J is double type reduction   [ ../src/adapt_compute.cpp(693,16) ]
   remark #15355: vectorization support: *(J+8) is double type reduction   [ ../src/adapt_compute.cpp(694,9) ]
   remark #15355: vectorization support: *(J+16) is double type reduction   [ ../src/adapt_compute.cpp(695,9) ]
   remark #15355: vectorization support: *(J+24) is double type reduction   [ ../src/adapt_compute.cpp(697,9) ]
   remark #15355: vectorization support: *(J+32) is double type reduction   [ ../src/adapt_compute.cpp(698,9) ]
   remark #15355: vectorization support: *(J+40) is double type reduction   [ ../src/adapt_compute.cpp(699,9) ]
   remark #15355: vectorization support: *(J+48) is double type reduction   [ ../src/adapt_compute.cpp(701,9) ]
   remark #15355: vectorization support: *(J+56) is double type reduction   [ ../src/adapt_compute.cpp(702,9) ]
   remark #15355: vectorization support: *(J+64) is double type reduction   [ ../src/adapt_compute.cpp(703,9) ]
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 9.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Distributed chunk1>
   remark #15389: vectorization support: reference at (687:15) has unaligned access   [ ../src/adapt_compute.cpp(687,15) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(685,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(686,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(693,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(694,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(695,27) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(697,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(698,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(699,26) ]
   remark #15389: vectorization support: reference at (701:27) has unaligned access   [ ../src/adapt_compute.cpp(701,27) ]
   remark #15389: vectorization support: reference at (702:27) has unaligned access   [ ../src/adapt_compute.cpp(702,27) ]
   remark #15389: vectorization support: reference at (703:27) has unaligned access   [ ../src/adapt_compute.cpp(703,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: non-unit strided load was generated for the variable <ref[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(687,72) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <ref[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(685,73) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <ref[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(686,73) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(693,32) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(694,32) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(695,32) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(697,31) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(698,31) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(699,31) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(701,32) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(702,32) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(703,32) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.551
   remark #15355: vectorization support: *J is double type reduction   [ ../src/adapt_compute.cpp(693,16) ]
   remark #15355: vectorization support: *(J+8) is double type reduction   [ ../src/adapt_compute.cpp(694,9) ]
   remark #15355: vectorization support: *(J+16) is double type reduction   [ ../src/adapt_compute.cpp(695,9) ]
   remark #15355: vectorization support: *(J+24) is double type reduction   [ ../src/adapt_compute.cpp(697,9) ]
   remark #15355: vectorization support: *(J+32) is double type reduction   [ ../src/adapt_compute.cpp(698,9) ]
   remark #15355: vectorization support: *(J+40) is double type reduction   [ ../src/adapt_compute.cpp(699,9) ]
   remark #15355: vectorization support: *(J+48) is double type reduction   [ ../src/adapt_compute.cpp(701,9) ]
   remark #15355: vectorization support: *(J+56) is double type reduction   [ ../src/adapt_compute.cpp(702,9) ]
   remark #15355: vectorization support: *(J+64) is double type reduction   [ ../src/adapt_compute.cpp(703,9) ]
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15452: unmasked strided loads: 12 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 118 
   remark #15477: vector cost: 31.060 
   remark #15478: estimated potential speedup: 3.150 
   remark #15487: type converts: 3 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15389: vectorization support: reference at (687:15) has unaligned access   [ ../src/adapt_compute.cpp(687,15) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(685,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(686,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(693,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(694,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(695,27) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(697,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(698,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(699,26) ]
   remark #15389: vectorization support: reference at (701:27) has unaligned access   [ ../src/adapt_compute.cpp(701,27) ]
   remark #15389: vectorization support: reference at (702:27) has unaligned access   [ ../src/adapt_compute.cpp(702,27) ]
   remark #15389: vectorization support: reference at (703:27) has unaligned access   [ ../src/adapt_compute.cpp(703,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.610
   remark #15355: vectorization support: *J is double type reduction   [ ../src/adapt_compute.cpp(693,16) ]
   remark #15355: vectorization support: *(J+8) is double type reduction   [ ../src/adapt_compute.cpp(694,9) ]
   remark #15355: vectorization support: *(J+16) is double type reduction   [ ../src/adapt_compute.cpp(695,9) ]
   remark #15355: vectorization support: *(J+24) is double type reduction   [ ../src/adapt_compute.cpp(697,9) ]
   remark #15355: vectorization support: *(J+32) is double type reduction   [ ../src/adapt_compute.cpp(698,9) ]
   remark #15355: vectorization support: *(J+40) is double type reduction   [ ../src/adapt_compute.cpp(699,9) ]
   remark #15355: vectorization support: *(J+48) is double type reduction   [ ../src/adapt_compute.cpp(701,9) ]
   remark #15355: vectorization support: *(J+56) is double type reduction   [ ../src/adapt_compute.cpp(702,9) ]
   remark #15355: vectorization support: *(J+64) is double type reduction   [ ../src/adapt_compute.cpp(703,9) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 9.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Peeled loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(683,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 9.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(683,10) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.667
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 9.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(683,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 9.230 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: ComputeJAtCenter(std::vector<double, std::allocator<double>> *, int) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(628,5)
   remark #15389: vectorization support: reference J[i] has unaligned access   [ ../src/adapt_compute.cpp(630,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.300
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 2.110 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(628,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
   remark #15389: vectorization support: reference at (645:15) has unaligned access   [ ../src/adapt_compute.cpp(645,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(644,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(643,15) ]
   remark #15388: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(642,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.264
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 2.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference at (645:15) has unaligned access   [ ../src/adapt_compute.cpp(645,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(644,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(643,15) ]
   remark #15389: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(642,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.100
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 2.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Peeled loop for vectorization, Distributed chunk1>
   remark #15389: vectorization support: reference at (687:15) has unaligned access   [ ../src/adapt_compute.cpp(687,15) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(685,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(686,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(693,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(694,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(695,27) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(697,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(698,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(699,26) ]
   remark #15389: vectorization support: reference at (701:27) has unaligned access   [ ../src/adapt_compute.cpp(701,27) ]
   remark #15389: vectorization support: reference at (702:27) has unaligned access   [ ../src/adapt_compute.cpp(702,27) ]
   remark #15389: vectorization support: reference at (703:27) has unaligned access   [ ../src/adapt_compute.cpp(703,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.565
   remark #15355: vectorization support: *J is double type reduction   [ ../src/adapt_compute.cpp(693,16) ]
   remark #15355: vectorization support: *(J+8) is double type reduction   [ ../src/adapt_compute.cpp(694,9) ]
   remark #15355: vectorization support: *(J+16) is double type reduction   [ ../src/adapt_compute.cpp(695,9) ]
   remark #15355: vectorization support: *(J+24) is double type reduction   [ ../src/adapt_compute.cpp(697,9) ]
   remark #15355: vectorization support: *(J+32) is double type reduction   [ ../src/adapt_compute.cpp(698,9) ]
   remark #15355: vectorization support: *(J+40) is double type reduction   [ ../src/adapt_compute.cpp(699,9) ]
   remark #15355: vectorization support: *(J+48) is double type reduction   [ ../src/adapt_compute.cpp(701,9) ]
   remark #15355: vectorization support: *(J+56) is double type reduction   [ ../src/adapt_compute.cpp(702,9) ]
   remark #15355: vectorization support: *(J+64) is double type reduction   [ ../src/adapt_compute.cpp(703,9) ]
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Distributed chunk1>
   remark #15389: vectorization support: reference at (687:15) has unaligned access   [ ../src/adapt_compute.cpp(687,15) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(685,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(686,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(693,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(694,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(695,27) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(697,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(698,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(699,26) ]
   remark #15389: vectorization support: reference at (701:27) has unaligned access   [ ../src/adapt_compute.cpp(701,27) ]
   remark #15389: vectorization support: reference at (702:27) has unaligned access   [ ../src/adapt_compute.cpp(702,27) ]
   remark #15389: vectorization support: reference at (703:27) has unaligned access   [ ../src/adapt_compute.cpp(703,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ref[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(687,72) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ref[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(685,73) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ref[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(686,73) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(693,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(694,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(695,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(697,31) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(698,31) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(699,31) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(701,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(702,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(703,32) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.072
   remark #15355: vectorization support: *J is double type reduction   [ ../src/adapt_compute.cpp(693,16) ]
   remark #15355: vectorization support: *(J+8) is double type reduction   [ ../src/adapt_compute.cpp(694,9) ]
   remark #15355: vectorization support: *(J+16) is double type reduction   [ ../src/adapt_compute.cpp(695,9) ]
   remark #15355: vectorization support: *(J+24) is double type reduction   [ ../src/adapt_compute.cpp(697,9) ]
   remark #15355: vectorization support: *(J+32) is double type reduction   [ ../src/adapt_compute.cpp(698,9) ]
   remark #15355: vectorization support: *(J+40) is double type reduction   [ ../src/adapt_compute.cpp(699,9) ]
   remark #15355: vectorization support: *(J+48) is double type reduction   [ ../src/adapt_compute.cpp(701,9) ]
   remark #15355: vectorization support: *(J+56) is double type reduction   [ ../src/adapt_compute.cpp(702,9) ]
   remark #15355: vectorization support: *(J+64) is double type reduction   [ ../src/adapt_compute.cpp(703,9) ]
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15452: unmasked strided loads: 12 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 118 
   remark #15477: vector cost: 45.000 
   remark #15478: estimated potential speedup: 2.530 
   remark #15487: type converts: 3 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15389: vectorization support: reference at (687:15) has unaligned access   [ ../src/adapt_compute.cpp(687,15) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(685,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(686,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(693,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(694,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(695,27) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(697,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(698,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(699,26) ]
   remark #15389: vectorization support: reference at (701:27) has unaligned access   [ ../src/adapt_compute.cpp(701,27) ]
   remark #15389: vectorization support: reference at (702:27) has unaligned access   [ ../src/adapt_compute.cpp(702,27) ]
   remark #15389: vectorization support: reference at (703:27) has unaligned access   [ ../src/adapt_compute.cpp(703,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.565
   remark #15355: vectorization support: *J is double type reduction   [ ../src/adapt_compute.cpp(693,16) ]
   remark #15355: vectorization support: *(J+8) is double type reduction   [ ../src/adapt_compute.cpp(694,9) ]
   remark #15355: vectorization support: *(J+16) is double type reduction   [ ../src/adapt_compute.cpp(695,9) ]
   remark #15355: vectorization support: *(J+24) is double type reduction   [ ../src/adapt_compute.cpp(697,9) ]
   remark #15355: vectorization support: *(J+32) is double type reduction   [ ../src/adapt_compute.cpp(698,9) ]
   remark #15355: vectorization support: *(J+40) is double type reduction   [ ../src/adapt_compute.cpp(699,9) ]
   remark #15355: vectorization support: *(J+48) is double type reduction   [ ../src/adapt_compute.cpp(701,9) ]
   remark #15355: vectorization support: *(J+56) is double type reduction   [ ../src/adapt_compute.cpp(702,9) ]
   remark #15355: vectorization support: *(J+64) is double type reduction   [ ../src/adapt_compute.cpp(703,9) ]
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(683,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(683,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.600
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END
===========================================================================

Begin optimization report for: ComputeJAtCenter(std::vector<double, std::allocator<double>> *, int) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(628,5)
   remark #15389: vectorization support: reference J[i] has unaligned access   [ ../src/adapt_compute.cpp(630,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.300
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 2.110 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(628,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
   remark #15389: vectorization support: reference at (645:15) has unaligned access   [ ../src/adapt_compute.cpp(645,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(644,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(643,15) ]
   remark #15388: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(642,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.264
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 2.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference at (645:15) has unaligned access   [ ../src/adapt_compute.cpp(645,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(644,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(643,15) ]
   remark #15389: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(642,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.100
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 2.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Peeled loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Distributed chunk1>
   remark #15389: vectorization support: reference at (687:15) has unaligned access   [ ../src/adapt_compute.cpp(687,15) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(685,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(686,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(693,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(694,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(695,27) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(697,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(698,26) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(699,26) ]
   remark #15389: vectorization support: reference at (701:27) has unaligned access   [ ../src/adapt_compute.cpp(701,27) ]
   remark #15389: vectorization support: reference at (702:27) has unaligned access   [ ../src/adapt_compute.cpp(702,27) ]
   remark #15389: vectorization support: reference at (703:27) has unaligned access   [ ../src/adapt_compute.cpp(703,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ref[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(687,72) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ref[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(685,73) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ref[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(686,73) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(693,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(694,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(695,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(697,31) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(698,31) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(699,31) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(701,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(702,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(703,32) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.072
   remark #15355: vectorization support: *J is double type reduction   [ ../src/adapt_compute.cpp(693,16) ]
   remark #15355: vectorization support: *(J+8) is double type reduction   [ ../src/adapt_compute.cpp(694,9) ]
   remark #15355: vectorization support: *(J+16) is double type reduction   [ ../src/adapt_compute.cpp(695,9) ]
   remark #15355: vectorization support: *(J+24) is double type reduction   [ ../src/adapt_compute.cpp(697,9) ]
   remark #15355: vectorization support: *(J+32) is double type reduction   [ ../src/adapt_compute.cpp(698,9) ]
   remark #15355: vectorization support: *(J+40) is double type reduction   [ ../src/adapt_compute.cpp(699,9) ]
   remark #15355: vectorization support: *(J+48) is double type reduction   [ ../src/adapt_compute.cpp(701,9) ]
   remark #15355: vectorization support: *(J+56) is double type reduction   [ ../src/adapt_compute.cpp(702,9) ]
   remark #15355: vectorization support: *(J+64) is double type reduction   [ ../src/adapt_compute.cpp(703,9) ]
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15452: unmasked strided loads: 12 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 118 
   remark #15477: vector cost: 45.000 
   remark #15478: estimated potential speedup: 2.530 
   remark #15487: type converts: 3 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(683,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(683,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.600
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END
===========================================================================

Begin optimization report for: ComputeJAtCenter(std::vector<double, std::allocator<double>> *, int) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(628,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(628,5)
   remark #15388: vectorization support: reference J[i] has aligned access   [ ../src/adapt_compute.cpp(630,9) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.380 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(628,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
   remark #15389: vectorization support: reference at (645:15) has unaligned access   [ ../src/adapt_compute.cpp(645,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(644,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(643,15) ]
   remark #15388: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(642,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.132
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 16 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference at (645:15) has unaligned access   [ ../src/adapt_compute.cpp(645,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(644,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(643,15) ]
   remark #15388: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(642,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.528
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 16 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Peeled loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Distributed chunk1>
   remark #15389: vectorization support: reference at (687:15) has unaligned access   [ ../src/adapt_compute.cpp(687,15) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(685,15) ]
   remark #15388: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(686,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(693,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(694,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(695,27) ]
   remark #15388: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(697,26) ]
   remark #15388: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(698,26) ]
   remark #15388: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(699,26) ]
   remark #15389: vectorization support: reference at (701:27) has unaligned access   [ ../src/adapt_compute.cpp(701,27) ]
   remark #15389: vectorization support: reference at (702:27) has unaligned access   [ ../src/adapt_compute.cpp(702,27) ]
   remark #15389: vectorization support: reference at (703:27) has unaligned access   [ ../src/adapt_compute.cpp(703,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ref[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(687,72) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ref[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(685,73) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ref[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(686,73) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(693,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(694,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(695,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(697,31) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(698,31) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(699,31) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(701,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(702,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(703,32) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.490
   remark #15355: vectorization support: *J is double type reduction   [ ../src/adapt_compute.cpp(693,16) ]
   remark #15355: vectorization support: *(J+8) is double type reduction   [ ../src/adapt_compute.cpp(694,9) ]
   remark #15355: vectorization support: *(J+16) is double type reduction   [ ../src/adapt_compute.cpp(695,9) ]
   remark #15355: vectorization support: *(J+24) is double type reduction   [ ../src/adapt_compute.cpp(697,9) ]
   remark #15355: vectorization support: *(J+32) is double type reduction   [ ../src/adapt_compute.cpp(698,9) ]
   remark #15355: vectorization support: *(J+40) is double type reduction   [ ../src/adapt_compute.cpp(699,9) ]
   remark #15355: vectorization support: *(J+48) is double type reduction   [ ../src/adapt_compute.cpp(701,9) ]
   remark #15355: vectorization support: *(J+56) is double type reduction   [ ../src/adapt_compute.cpp(702,9) ]
   remark #15355: vectorization support: *(J+64) is double type reduction   [ ../src/adapt_compute.cpp(703,9) ]
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15452: unmasked strided loads: 12 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 120 
   remark #15477: vector cost: 50.500 
   remark #15478: estimated potential speedup: 2.280 
   remark #15487: type converts: 3 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(683,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15388: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(683,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END
===========================================================================

Begin optimization report for: ComputeJAtCenter(std::vector<double, std::allocator<double>> *, int) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(628,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(628,5)
   remark #15388: vectorization support: reference J[i] has aligned access   [ ../src/adapt_compute.cpp(630,9) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.380 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(628,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(635,27)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(636,32)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(637,31)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(638,32)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
   remark #15389: vectorization support: reference at (645:15) has unaligned access   [ ../src/adapt_compute.cpp(645,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(644,14) ]
   remark #15388: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(643,15) ]
   remark #15388: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(642,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.312
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 16 
   remark #15477: vector cost: 8.000 
   remark #15478: estimated potential speedup: 1.950 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(640,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference at (645:15) has unaligned access   [ ../src/adapt_compute.cpp(645,15) ]
   remark #15389: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(644,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(643,15) ]
   remark #15388: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(642,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.731
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 16 
   remark #15477: vector cost: 8.000 
   remark #15478: estimated potential speedup: 1.950 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Peeled loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Distributed chunk1>
   remark #15389: vectorization support: reference at (687:15) has unaligned access   [ ../src/adapt_compute.cpp(687,15) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(685,15) ]
   remark #15388: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(686,14) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(693,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(694,27) ]
   remark #15389: vectorization support: reference dNdeta.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has unaligned access   [ ../src/adapt_compute.cpp(695,27) ]
   remark #15388: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(697,26) ]
   remark #15388: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(698,26) ]
   remark #15388: vectorization support: reference dNdmu.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(699,26) ]
   remark #15389: vectorization support: reference at (701:27) has unaligned access   [ ../src/adapt_compute.cpp(701,27) ]
   remark #15389: vectorization support: reference at (702:27) has unaligned access   [ ../src/adapt_compute.cpp(702,27) ]
   remark #15389: vectorization support: reference at (703:27) has unaligned access   [ ../src/adapt_compute.cpp(703,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ref[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(687,72) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ref[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(685,73) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ref[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(686,73) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(693,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(694,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(695,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(697,31) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(698,31) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(699,31) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3]>, stride is 3   [ ../src/adapt_compute.cpp(701,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+1]>, stride is 3   [ ../src/adapt_compute.cpp(702,32) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P->_M_start[i*3+2]>, stride is 3   [ ../src/adapt_compute.cpp(703,32) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.462
   remark #15355: vectorization support: *J is double type reduction   [ ../src/adapt_compute.cpp(693,16) ]
   remark #15355: vectorization support: *(J+8) is double type reduction   [ ../src/adapt_compute.cpp(694,9) ]
   remark #15355: vectorization support: *(J+16) is double type reduction   [ ../src/adapt_compute.cpp(695,9) ]
   remark #15355: vectorization support: *(J+24) is double type reduction   [ ../src/adapt_compute.cpp(697,9) ]
   remark #15355: vectorization support: *(J+32) is double type reduction   [ ../src/adapt_compute.cpp(698,9) ]
   remark #15355: vectorization support: *(J+40) is double type reduction   [ ../src/adapt_compute.cpp(699,9) ]
   remark #15355: vectorization support: *(J+48) is double type reduction   [ ../src/adapt_compute.cpp(701,9) ]
   remark #15355: vectorization support: *(J+56) is double type reduction   [ ../src/adapt_compute.cpp(702,9) ]
   remark #15355: vectorization support: *(J+64) is double type reduction   [ ../src/adapt_compute.cpp(703,9) ]
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15452: unmasked strided loads: 12 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 120 
   remark #15477: vector cost: 66.000 
   remark #15478: estimated potential speedup: 1.790 
   remark #15487: type converts: 3 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference N.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[i] has aligned access   [ ../src/adapt_compute.cpp(683,10) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(681,5)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumeCellsSerial(Array<double> *, Array<int> *, MPI_Comm)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1056,30)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1063,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1067:14) and xcn->data[Vid*xcn->ncol+2] (1069:14)
   remark #15346: vector dependence: assumed ANTI dependence between xcn->data[Vid*xcn->ncol+2] (1069:14) and P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1067:14)
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1061,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1072,37) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumeHexCell(std::vector<double, std::allocator<double>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(343,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(344,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumeHexCell(std::vector<double, std::allocator<double>> *) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(343,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(344,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumeHexCell(std::vector<double, std::allocator<double>> *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(343,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(344,28)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumeCellsReducedToVerts(Array<double> *, Array<int> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1104,30)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1110,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1114:14) and xcn->data[Vid*xcn->ncol+2] (1116:14)
   remark #15346: vector dependence: assumed ANTI dependence between xcn->data[Vid*xcn->ncol+2] (1116:14) and P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1114:14)
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1121,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between vert_cnt[Vid] (1125:13) and vert_cnt[Vid] (1125:13)
   remark #15346: vector dependence: assumed ANTI dependence between vert_cnt[Vid] (1125:13) and vert_cnt[Vid] (1125:13)
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference U20a_V[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,9) ]
   remark #15389: vectorization support: reference sum_vol[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,24) ]
   remark #15389: vectorization support: reference vert_cnt[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.392
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 4.870 
   remark #15478: estimated potential speedup: 6.090 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
   remark #15388: vectorization support: reference U20a_V[i] has aligned access   [ ../src/adapt_compute.cpp(1132,9) ]
   remark #15389: vectorization support: reference sum_vol[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,24) ]
   remark #15389: vectorization support: reference vert_cnt[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.205
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 4.870 
   remark #15478: estimated potential speedup: 6.090 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference U20a_V[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,9) ]
   remark #15389: vectorization support: reference sum_vol[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,24) ]
   remark #15389: vectorization support: reference vert_cnt[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.392
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 4.870 
   remark #15478: estimated potential speedup: 6.090 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1108,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1119,37) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumeCellsReducedToVerts(Array<double> *, Array<int> *) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1104,30)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1110,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1114:14) and xcn->data[Vid*xcn->ncol+2] (1116:14)
   remark #15346: vector dependence: assumed ANTI dependence between xcn->data[Vid*xcn->ncol+2] (1116:14) and P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1114:14)
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1121,9)
   remark #15389: vectorization support: reference ien->data[i*ien->ncol+j+1] has unaligned access   [ ../src/adapt_array.h(26,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <vert_cnt[Vid]>, part of index is read from memory   [ ../src/adapt_compute.cpp(1125,13) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <vert_cnt[Vid]>, part of index is read from memory   [ ../src/adapt_compute.cpp(1125,29) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <sum_vol[Vid]>, part of index is read from memory   [ ../src/adapt_compute.cpp(1126,13) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <sum_vol[Vid]>, part of index is read from memory   [ ../src/adapt_compute.cpp(1126,29) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15463: unmasked indexed (or scatter) stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 32.000 
   remark #15478: estimated potential speedup: 0.610 
   remark #15488: --- end vector cost summary ---
   remark #15499: histogram: 2 
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference U20a_V[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,9) ]
   remark #15389: vectorization support: reference sum_vol[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,24) ]
   remark #15389: vectorization support: reference vert_cnt[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.417
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.250 
   remark #15478: estimated potential speedup: 3.220 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
   remark #15388: vectorization support: reference U20a_V[i] has aligned access   [ ../src/adapt_compute.cpp(1132,9) ]
   remark #15389: vectorization support: reference sum_vol[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,24) ]
   remark #15389: vectorization support: reference vert_cnt[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.108
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.250 
   remark #15478: estimated potential speedup: 3.220 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference U20a_V[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,9) ]
   remark #15389: vectorization support: reference sum_vol[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,24) ]
   remark #15389: vectorization support: reference vert_cnt[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.417
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.250 
   remark #15478: estimated potential speedup: 3.220 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1108,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1119,37) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumeCellsReducedToVerts(Array<double> *, Array<int> *) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1104,30)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1110,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1114:14) and xcn->data[Vid*xcn->ncol+2] (1116:14)
   remark #15346: vector dependence: assumed ANTI dependence between xcn->data[Vid*xcn->ncol+2] (1116:14) and P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1114:14)
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1121,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between vert_cnt[Vid] (1125:13) and vert_cnt[Vid] (1125:13)
   remark #15346: vector dependence: assumed ANTI dependence between vert_cnt[Vid] (1125:13) and vert_cnt[Vid] (1125:13)
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
   remark #15388: vectorization support: reference U20a_V[i] has aligned access   [ ../src/adapt_compute.cpp(1132,9) ]
   remark #15389: vectorization support: reference sum_vol[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,24) ]
   remark #15389: vectorization support: reference vert_cnt[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.108
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.250 
   remark #15478: estimated potential speedup: 3.130 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference U20a_V[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,9) ]
   remark #15389: vectorization support: reference sum_vol[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,24) ]
   remark #15389: vectorization support: reference vert_cnt[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.487
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.250 
   remark #15478: estimated potential speedup: 3.130 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1108,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1119,37) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumeCellsReducedToVerts(Array<double> *, Array<int> *) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1104,30)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1110,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1114:14) and xcn->data[Vid*xcn->ncol+2] (1116:14)
   remark #15346: vector dependence: assumed ANTI dependence between xcn->data[Vid*xcn->ncol+2] (1116:14) and P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1114:14)
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1121,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between vert_cnt[Vid] (1125:13) and vert_cnt[Vid] (1125:13)
   remark #15346: vector dependence: assumed ANTI dependence between vert_cnt[Vid] (1125:13) and vert_cnt[Vid] (1125:13)
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
   remark #15388: vectorization support: reference U20a_V[i] has aligned access   [ ../src/adapt_compute.cpp(1132,9) ]
   remark #15389: vectorization support: reference sum_vol[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,24) ]
   remark #15389: vectorization support: reference vert_cnt[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.085
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 11.750 
   remark #15478: estimated potential speedup: 2.530 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference U20a_V[i] has aligned access   [ ../src/adapt_compute.cpp(1132,9) ]
   remark #15389: vectorization support: reference sum_vol[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,24) ]
   remark #15389: vectorization support: reference vert_cnt[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.340
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 11.750 
   remark #15478: estimated potential speedup: 2.530 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1108,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1119,37) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumeCellsReducedToVerts(Array<double> *, Array<int> *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1104,30)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1110,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1114:14) and xcn->data[Vid*xcn->ncol+2] (1116:14)
   remark #15346: vector dependence: assumed ANTI dependence between xcn->data[Vid*xcn->ncol+2] (1116:14) and P.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_ (1114:14)
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1121,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between vert_cnt[Vid] (1125:13) and vert_cnt[Vid] (1125:13)
   remark #15346: vector dependence: assumed ANTI dependence between vert_cnt[Vid] (1125:13) and vert_cnt[Vid] (1125:13)
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
   remark #15388: vectorization support: reference U20a_V[i] has aligned access   [ ../src/adapt_compute.cpp(1132,9) ]
   remark #15389: vectorization support: reference sum_vol[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,24) ]
   remark #15388: vectorization support: reference vert_cnt[i] has aligned access   [ ../src/adapt_compute.cpp(1132,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 18.000 
   remark #15478: estimated potential speedup: 1.750 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference U20a_V[i] has aligned access   [ ../src/adapt_compute.cpp(1132,9) ]
   remark #15389: vectorization support: reference sum_vol[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,24) ]
   remark #15389: vectorization support: reference vert_cnt[i] has unaligned access   [ ../src/adapt_compute.cpp(1132,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.372
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 18.000 
   remark #15478: estimated potential speedup: 1.750 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1130,5)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1108,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1119,37) ]
LOOP END
===========================================================================

Begin optimization report for: UnitTestJacobian()

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1148,29)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1149,8)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1161,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(1163,9)
      remark #26015: Exception can be thrown by the call to std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double)   [ ../src/adapt_compute.cpp(1165,23) ]
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1165,23) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: UnitTestJacobian() [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1148,29)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1149,8)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1161,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(1163,9)
      remark #26015: Exception can be thrown by the call to std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double)   [ ../src/adapt_compute.cpp(1165,23) ]
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1165,23) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: UnitTestJacobian() [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1148,29)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1149,8)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1161,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(1163,9)
      remark #26015: Exception can be thrown by the call to std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double)   [ ../src/adapt_compute.cpp(1165,23) ]
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1165,23) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/char_traits.h(233,7) inlined into /usr/include/c++/8/bits/char_traits.h(327,6)
   remark #15523: loop was not vectorized: loop control variable __s was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/char_traits.h(165,7) inlined into /usr/include/c++/8/bits/char_traits.h(328,11)
   remark #15523: loop was not vectorized: loop control variable __i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: ComputeMetric_Lite(std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, MPI_Comm, PartObject *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> &, Inputs *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(1234,25)
   remark #26015: Exception can be thrown by the call to std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::operator[](std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &)   [ ../src/adapt_compute.cpp(1236,61) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1236,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1243,17)
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,28) ]
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,42) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.184
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.500 
   remark #15478: estimated potential speedup: 2.310 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1243,17)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,28) ]
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,42) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.175
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.500 
   remark #15478: estimated potential speedup: 2.310 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1268,56)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1269,58)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1271,17)
   remark #26015: Exception can be thrown by the call to std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &)   [ ../src/adapt_compute.cpp(1273,51) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1273,51) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1212,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1215,27) ]

   LOOP BEGIN at ../src/adapt_compute.cpp(1216,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1218,31) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1220,38)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(114,7) inlined into ../src/adapt_compute.cpp(1224,62)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(128,7) inlined into ../src/adapt_compute.cpp(1224,62)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(1229,42)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1236,61) ]

         LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1232,40)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1328,13)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeMetric_Lite(std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, MPI_Comm, PartObject *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> &, Inputs *) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(1234,25)
   remark #26015: Exception can be thrown by the call to std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::operator[](std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &)   [ ../src/adapt_compute.cpp(1236,61) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1236,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1243,17)
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,28) ]
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,42) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.184
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.500 
   remark #15478: estimated potential speedup: 2.310 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1243,17)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,28) ]
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,42) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.175
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.500 
   remark #15478: estimated potential speedup: 2.310 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1268,56)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1269,58)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1271,17)
   remark #26015: Exception can be thrown by the call to std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &)   [ ../src/adapt_compute.cpp(1273,51) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1273,51) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1212,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1215,27) ]

   LOOP BEGIN at ../src/adapt_compute.cpp(1216,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1218,31) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1220,38)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(114,7) inlined into ../src/adapt_compute.cpp(1224,62)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(128,7) inlined into ../src/adapt_compute.cpp(1224,62)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(1229,42)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1236,61) ]

         LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1232,40)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1328,13)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeMetric_Lite(std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, MPI_Comm, PartObject *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> &, Inputs *) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(1234,25)
   remark #26015: Exception can be thrown by the call to std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::operator[](std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &)   [ ../src/adapt_compute.cpp(1236,61) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1236,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1243,17)
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,28) ]
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,42) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.184
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.500 
   remark #15478: estimated potential speedup: 1.760 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1243,17)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,28) ]
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,42) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.175
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.500 
   remark #15478: estimated potential speedup: 1.760 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1268,56)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1269,58)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1271,17)
   remark #26015: Exception can be thrown by the call to std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &)   [ ../src/adapt_compute.cpp(1273,51) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1273,51) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1212,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1215,27) ]

   LOOP BEGIN at ../src/adapt_compute.cpp(1216,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1218,31) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1220,38)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(114,7) inlined into ../src/adapt_compute.cpp(1224,62)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(128,7) inlined into ../src/adapt_compute.cpp(1224,62)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(1229,42)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1236,61) ]

         LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1232,40)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1328,13)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeMetric_Lite(std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, MPI_Comm, PartObject *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> &, Inputs *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(1234,25)
   remark #26015: Exception can be thrown by the call to std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::operator[](std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &)   [ ../src/adapt_compute.cpp(1236,61) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1236,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1243,17)
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,28) ]
   remark #15389: vectorization support: reference row_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE[k] has unaligned access   [ ../src/adapt_compute.cpp(1245,42) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15309: vectorization support: normalized vectorization overhead 0.070
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 19.000 
   remark #15478: estimated potential speedup: 1.570 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1268,56)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1269,58)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1271,17)
   remark #26015: Exception can be thrown by the call to std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &)   [ ../src/adapt_compute.cpp(1273,51) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1273,51) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1212,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1215,27) ]

   LOOP BEGIN at ../src/adapt_compute.cpp(1216,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1218,31) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1220,38)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(114,7) inlined into ../src/adapt_compute.cpp(1224,62)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(128,7) inlined into ../src/adapt_compute.cpp(1224,62)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(1229,42)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1236,61) ]

         LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1232,40)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1328,13)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1415,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_M_copy<std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_Alloc_node>(std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_Const_Link_type, std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_Base_ptr, std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_Alloc_node &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1851,6)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.857
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.500
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.500
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.357
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.920 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_type, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type, std::_Select1st<std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::value_type>, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::key_compare, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::operator[](std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, const std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::operator[](std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>> *, const std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::key_type, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::value_type, std::_Select1st<std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::value_type>, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::key_compare, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::_Pair_alloc_type>::_M_drop_node(std::_Rb_tree<std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::key_type, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::value_type, std::_Select1st<std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::value_type>, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::key_compare, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::key_type, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::value_type, std::_Select1st<std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::value_type>, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::key_compare, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::_Pair_alloc_type>::_Link_type) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_tree.h(659,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: MatMul_Lite(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(526,8) inlined into ../src/adapt_compute.cpp(56,41)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(64,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_compute.cpp(67,13)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference ((A->_M_start+i*24)->_M_start)[k] has unaligned access   [ ../src/adapt_compute.cpp(69,33) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.242
      remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(59,16) ]
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 6.120 
      remark #15478: estimated potential speedup: 1.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(67,13)
      remark #15388: vectorization support: reference ((A->_M_start+i*24)->_M_start)[k] has aligned access   [ ../src/adapt_compute.cpp(69,33) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <B->_M_start->_M_start[k]>, stride is 3   [ /usr/include/c++/8/bits/stl_vector.h(933,11) ]
      remark #15415: vectorization support: indirect load was generated for the variable <((B->_M_start+k*24)->_M_start)[j]>, 64-bit indexed, part of address is read from memory   [ ../src/adapt_compute.cpp(69,41) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.194
      remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(59,16) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 6.120 
      remark #15478: estimated potential speedup: 1.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(67,13)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference ((A->_M_start+i*24)->_M_start)[k] has unaligned access   [ ../src/adapt_compute.cpp(69,33) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.242
      remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(59,16) ]
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 6.120 
      remark #15478: estimated potential speedup: 1.200 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(60,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(62,35) ]
LOOP END
===========================================================================

Begin optimization report for: MatMul_Lite(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(526,8) inlined into ../src/adapt_compute.cpp(56,41)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(64,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(67,13)
      remark #15389: vectorization support: reference ((A->_M_start+i*24)->_M_start)[k] has unaligned access   [ ../src/adapt_compute.cpp(69,33) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <B->_M_start->_M_start[k]>, stride is 3   [ /usr/include/c++/8/bits/stl_vector.h(933,11) ]
      remark #15328: vectorization support: indirect load was emulated for the variable <((B->_M_start+k*24)->_M_start)[j]>, 64-bit indexed, part of address is read from memory   [ ../src/adapt_compute.cpp(69,41) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.236
      remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(59,16) ]
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 0.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(67,13)
   <Remainder>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(60,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(62,35) ]
LOOP END
===========================================================================

Begin optimization report for: MatMul_Lite(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(526,8) inlined into ../src/adapt_compute.cpp(56,41)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(64,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_compute.cpp(67,13)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(67,13)
      remark #15388: vectorization support: reference ((A->_M_start+i*24)->_M_start)[k] has aligned access   [ ../src/adapt_compute.cpp(69,33) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <B->_M_start->_M_start[k]>, stride is 3   [ /usr/include/c++/8/bits/stl_vector.h(933,11) ]
      remark #15328: vectorization support: indirect load was emulated for the variable <((B->_M_start+k*24)->_M_start)[j]>, 64-bit indexed, part of address is read from memory   [ ../src/adapt_compute.cpp(69,41) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.405
      remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(59,16) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 7.250 
      remark #15478: estimated potential speedup: 1.200 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(67,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(60,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(62,35) ]
LOOP END
===========================================================================

Begin optimization report for: MatMul_Lite(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(526,8) inlined into ../src/adapt_compute.cpp(56,41)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(64,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_compute.cpp(67,13)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(67,13)
      remark #15388: vectorization support: reference ((A->_M_start+i*24)->_M_start)[k] has aligned access   [ ../src/adapt_compute.cpp(69,33) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <B->_M_start->_M_start[k]>, stride is 3   [ /usr/include/c++/8/bits/stl_vector.h(933,11) ]
      remark #15328: vectorization support: indirect load was emulated for the variable <((B->_M_start+k*24)->_M_start)[j]>, 64-bit indexed, part of address is read from memory   [ ../src/adapt_compute.cpp(69,41) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.485
      remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(59,16) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 8.500 
      remark #15478: estimated potential speedup: 1.040 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(67,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(60,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(62,35) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::vector(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, const std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(82,23) inlined into /usr/include/c++/8/bits/stl_vector.h(464,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_construct.h(75,42) ]
LOOP END
===========================================================================

Begin optimization report for: MatInv_Lite(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(15,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(17,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/adapt_compute.cpp(17,9)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(17,9)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(526,8) inlined into ../src/adapt_compute.cpp(26,41)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(31,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between row.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__ (33:16) and R_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE. (33:16)
   remark #15346: vector dependence: assumed ANTI dependence between R_tmp.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE. (33:16) and row.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE.__ (33:16)
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(28,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(30,35) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::~vector(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_vector.h(568,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::~map(std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type, std::_Select1st<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type>, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_compare, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type, std::_Select1st<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type>, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_compare, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type, std::_Select1st<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type>, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_compare, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::set<int, std::less<int>, std::allocator<int>>::~set(std::set<int, std::less<int>, std::allocator<int>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_set.h(282,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_M_erase(std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type> *, std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::~map(std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::key_type, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::value_type, std::_Select1st<std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::value_type>, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::key_compare, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::key_type, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::value_type, std::_Select1st<std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::value_type>, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::key_compare, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::key_type, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::value_type, std::_Select1st<std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::value_type>, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::key_compare, std::map<int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>, std::less<int>, std::allocator<std::pair<const int, std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_tree.h(1882,4)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>>::~map(std::map<int, double, std::less<int>, std::allocator<std::pair<const int, double>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeMetricWithWake(Partition *, MPI_Comm, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> &, double, double, double, int, double, double, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1444,33)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1489,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(1495,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U232_V->data[j*U232_V->ncol+k] (22:13) and iV[j*3+k] (1499:17)
      remark #15346: vector dependence: assumed OUTPUT dependence between iV[j*3+k] (1499:17) and U232_V->data[j*U232_V->ncol+k] (22:13)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1495,22)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1495,22)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1446,32)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1452,30) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1471,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1472,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1474,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1475,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1476,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1537,40)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputeMetricWithWake(Partition *, MPI_Comm, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> &, double, double, double, int, double, double, double) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1444,33)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1489,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(1495,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U232_V->data[j*U232_V->ncol+k] (22:13) and iV[j*3+k] (1499:17)
      remark #15346: vector dependence: assumed OUTPUT dependence between iV[j*3+k] (1499:17) and U232_V->data[j*U232_V->ncol+k] (22:13)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1495,22)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1495,22)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1446,32)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1452,30) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1471,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1472,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1474,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1475,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1476,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1537,40)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputeMetricWithWake(Partition *, MPI_Comm, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> &, double, double, double, int, double, double, double) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1444,33)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1489,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(1495,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U232_V->data[j*U232_V->ncol+k] (22:13) and iV[j*3+k] (1499:17)
      remark #15346: vector dependence: assumed OUTPUT dependence between iV[j*3+k] (1499:17) and U232_V->data[j*U232_V->ncol+k] (22:13)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1495,22)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1495,22)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1446,32)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1452,30) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1471,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1472,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1474,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1475,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1476,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1537,40)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type, std::_Select1st<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type>, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_compare, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::_Pair_alloc_type>::_M_emplace_hint_unique<const std::piecewise_construct_t &, std::tuple<const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &>, std::tuple<>>(std::_Rb_tree<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type, std::_Select1st<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type>, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_compare, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type, std::_Select1st<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type>, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_compare, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::_Pair_alloc_type>::const_iterator, const std::piecewise_construct_t &, std::tuple<const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &> &&, std::tuple<> &&)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_tree.h(2426,56)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_tree.h(2426,56)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_tree.h(2426,56)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::operator[](std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *, const std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: MatMul(Array<double> *, Array<double> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(110,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_compute.cpp(112,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference A->data[i*A->ncol+k] has unaligned access   [ ../src/adapt_array.h(26,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.452
         remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(109,16) ]
         remark #15301: PEEL LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 2.870 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
         remark #15388: vectorization support: reference A->data[i*A->ncol+k] has aligned access   [ ../src/adapt_array.h(26,21) ]
         remark #15415: vectorization support: non-unit strided load was generated for the variable <B->data[k*B->ncol+j]>, stride is unknown to compiler   [ ../src/adapt_array.h(26,21) ]
         remark #15305: vectorization support: vector length 8
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.438
         remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(109,16) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 2.870 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference A->data[i*A->ncol+k] has unaligned access   [ ../src/adapt_array.h(26,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.452
         remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(109,16) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 2.870 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: MatMul(Array<double> *, Array<double> *) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(110,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_compute.cpp(112,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
         remark #15388: vectorization support: reference A->data[i*A->ncol+k] has aligned access   [ ../src/adapt_array.h(26,21) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <B->data[k*B->ncol+j]>, stride is unknown to compiler   [ ../src/adapt_array.h(26,21) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.639
         remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(109,16) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 1.730 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: MatMul(Array<double> *, Array<double> *) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(110,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_compute.cpp(112,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
         remark #15388: vectorization support: reference A->data[i*A->ncol+k] has aligned access   [ ../src/adapt_array.h(26,21) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <B->data[k*B->ncol+j]>, stride is unknown to compiler   [ ../src/adapt_array.h(26,21) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.639
         remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(109,16) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 1.730 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: MatMul(Array<double> *, Array<double> *) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(110,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_compute.cpp(112,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
         remark #15388: vectorization support: reference A->data[i*A->ncol+k] has aligned access   [ ../src/adapt_array.h(26,21) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <B->data[k*B->ncol+j]>, stride is unknown to compiler   [ ../src/adapt_array.h(26,21) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.732
         remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(109,16) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 3.500 
         remark #15478: estimated potential speedup: 2.330 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference A->data[i*A->ncol+k] has aligned access   [ ../src/adapt_array.h(26,21) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 2.929
         remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(109,16) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 3.500 
         remark #15478: estimated potential speedup: 2.330 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: MatMul(Array<double> *, Array<double> *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_compute.cpp(110,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/adapt_compute.cpp(112,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
         remark #15388: vectorization support: reference A->data[i*A->ncol+k] has aligned access   [ ../src/adapt_array.h(26,21) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <B->data[k*B->ncol+j]>, stride is unknown to compiler   [ ../src/adapt_array.h(26,21) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.725
         remark #15355: vectorization support: res is double type reduction   [ ../src/adapt_compute.cpp(109,16) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 1.740 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ../src/adapt_compute.cpp(115,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputeElementMetric_Lite(std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, MPI_Comm, PartObject *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> &, Inputs *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1657,48)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1658,50)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1660,9)
   remark #26015: Exception can be thrown by the call to std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &)   [ ../src/adapt_compute.cpp(1662,43) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1662,43) ]
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1685,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(1687,13)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.100 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1687,13)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1687,13)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1632,37)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1636,35) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into ../src/adapt_compute.cpp(1673,43)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into ../src/adapt_compute.cpp(1674,43)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into ../src/adapt_compute.cpp(1674,43)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into ../src/adapt_compute.cpp(1711,5)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1713,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1713,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeElementMetric_Lite(std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, MPI_Comm, PartObject *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> &, Inputs *) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1657,48)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1658,50)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1660,9)
   remark #26015: Exception can be thrown by the call to std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &)   [ ../src/adapt_compute.cpp(1662,43) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1662,43) ]
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1685,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(1687,13)
      remark #15389: vectorization support: reference ((metric.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE+i*24)->_M_start)[j] has unaligned access   [ ../src/adapt_compute.cpp(1689,26) ]
      remark #15389: vectorization support: reference ((metric.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE+i*24)->_M_start)[j] has unaligned access   [ ../src/adapt_compute.cpp(1689,51) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.700
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.870 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1687,13)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1687,13)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1632,37)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1636,35) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into ../src/adapt_compute.cpp(1673,43)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into ../src/adapt_compute.cpp(1674,43)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into ../src/adapt_compute.cpp(1674,43)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into ../src/adapt_compute.cpp(1711,5)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1713,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1713,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeElementMetric_Lite(std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, MPI_Comm, PartObject *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> &, Inputs *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1657,48)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(524,4) inlined into ../src/adapt_compute.cpp(1658,50)
   remark #15382: vectorization support: call to function std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *) noexcept(true) cannot be vectorized   [ /usr/include/c++/8/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1660,9)
   remark #26015: Exception can be thrown by the call to std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &)   [ ../src/adapt_compute.cpp(1662,43) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1662,43) ]
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1685,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(1687,13)
      remark #15389: vectorization support: reference ((metric.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE+i*24)->_M_start)[j] has unaligned access   [ ../src/adapt_compute.cpp(1689,26) ]
      remark #15389: vectorization support: reference ((metric.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE+i*24)->_M_start)[j] has unaligned access   [ ../src/adapt_compute.cpp(1689,51) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.889
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 0.870 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1687,13)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1687,13)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1632,37)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1636,35) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into ../src/adapt_compute.cpp(1673,43)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into ../src/adapt_compute.cpp(1674,43)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into ../src/adapt_compute.cpp(1674,43)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into ../src/adapt_compute.cpp(1711,5)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1713,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1713,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::operator[](std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: ComputeMetric(Partition *, MPI_Comm, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> &, double, double, int, int, double, double, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1742,33)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1790,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(1796,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U25c_V->data[j*U25c_V->ncol+k] (22:13) and iV[j*3+k] (1800:17)
      remark #15346: vector dependence: assumed OUTPUT dependence between iV[j*3+k] (1800:17) and U25c_V->data[j*U25c_V->ncol+k] (22:13)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1796,22)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1796,22)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1744,32)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1748,19) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1769,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1770,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1771,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1773,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1774,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1775,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputeMetric(Partition *, MPI_Comm, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> &, double, double, int, int, double, double, double) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1742,33)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.571
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1790,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(1796,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U25c_V->data[j*U25c_V->ncol+k] (22:13) and iV[j*3+k] (1800:17)
      remark #15346: vector dependence: assumed OUTPUT dependence between iV[j*3+k] (1800:17) and U25c_V->data[j*U25c_V->ncol+k] (22:13)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1796,22)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1796,22)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1744,32)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1748,19) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1769,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1770,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1771,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1773,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1774,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1775,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputeMetric(Partition *, MPI_Comm, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> &, double, double, int, int, double, double, double) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1742,33)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1790,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/adapt_compute.cpp(1796,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between U25c_V->data[j*U25c_V->ncol+k] (22:13) and iV[j*3+k] (1800:17)
      remark #15346: vector dependence: assumed OUTPUT dependence between iV[j*3+k] (1800:17) and U25c_V->data[j*U25c_V->ncol+k] (22:13)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1796,22)
   LOOP END

   LOOP BEGIN at ../src/adapt_compute.cpp(1796,22)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1744,32)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_compute.cpp(1748,19) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1769,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1770,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1771,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1773,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1774,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1775,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputeFaceValues(Partition *, Array<double> *, MPI_Comm)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1909,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]

   LOOP BEGIN at ../src/adapt_compute.cpp(1915,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1918,29)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_compute.cpp(1918,29)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_compute.cpp(1918,29)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_compute.cpp(1918,29)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1919,33)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_compute.cpp(1919,33)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_compute.cpp(1919,33)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_compute.cpp(1919,33)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1927,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1927,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1927,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1927,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1927,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1927,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::~map(std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::~map(std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::~map(std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type, std::_Select1st<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type>, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_compare, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type, std::_Select1st<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type>, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_compare, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_type, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type, std::_Select1st<std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::value_type>, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::key_compare, std::map<int, Array<double> *, std::less<int>, std::allocator<std::pair<const int, Array<double> *>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: ComputeVolumes(Partition *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_compute.cpp(1943,30)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/adapt_compute.cpp(1950,26)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between Pijk.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE._ (1953:15) and *((locVerts.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE.__b_S (1955:15)
   remark #15346: vector dependence: assumed ANTI dependence between *((locVerts.__b_St12_Vector_baseISt6vectorIdSaIdEESaIS2_EE.__b_S (1955:15) and Pijk.__b_St12_Vector_baseIdSaIdEE.__b_St12_Vector_baseIdSaIdEE._ (1953:15)
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_compute.cpp(1944,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_compute.cpp(1948,23)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_compute.cpp(1948,23)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_compute.cpp(1948,23)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_compute.cpp(1948,23)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into ../src/adapt_compute.cpp(1963,5)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1963,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into ../src/adapt_compute.cpp(1963,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer>(std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer, std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::vector<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::vector<double, std::allocator<double>>::pointer>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.857
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::vector<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::vector<double, std::allocator<double>>::pointer>::value_type &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.500
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::vector<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::vector<double, std::allocator<double>>::pointer>::value_type &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.500
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::vector<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::vector<double, std::allocator<double>>::pointer>::value_type &) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.357
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::vector<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::vector<double, std::allocator<double>>::pointer>::value_type &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.920 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================
