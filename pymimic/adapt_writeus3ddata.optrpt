Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -I/nobackupp19/dekelsch/Software/ParMmg/build/Mmg-prefix/src/Mmg-build/include -I/nobackupp19/dekelsch/Software/ParMmg/build/include -I/nobackupp19/dekelsch/parmetis-4.0.3/parmetis-install/include -I/nobackupp19/dekelsch/parmetis-4.0.3/metis/metis-install/include -I/nobackupp19/dekelsch/boost_1_71_0/boost-install/include -I/home1/dekelsch/Software/tinyxml -I/nobackupp19/dekelsch/CGNS-3.3.0/src/install/include -I/home1/dekelsch/local/lib/python3.12/site-packages/numpy/_core/include -I/home1/dekelsch/local/lib/python3.12/site-packages/mpi4py/include -I/home1/dekelsch/local/include/python3.12/ -std=c++17 -g -DMPI_NO_CPPBIND -fPIC -lm -lpthread -ldl -lutil -L/home1/dekelsch/local/lib/python3.12/ -O2 -Wall -axAVX,CORE-AVX2,CORE-AVX512 -qopt-report-phase=vec -qopt-report=5 -o PartiClass.so -L/nobackupp19/dekelsch/Software/ParMmg/build/Mmg-prefix/src/Mmg-build/lib -L/nobackupp19/dekelsch/Software/ParMmg/build/lib -L/nobackupp19/dekelsch/parmetis-4.0.3/parmetis-install/lib -L/nobackupp19/dekelsch/parmetis-4.0.3/metis/metis-install/lib -L/nobackupp19/dekelsch/boost_1_71_0/boost-install/stage/lib -L/home1/dekelsch/Software/tinyxml -L/nobackupp19/dekelsch/CGNS-3.3.0/src/install/lib -shared -lm -lpthread -ldl -lutil -L/home1/dekelsch/local/lib/python3.12/ -lmpi -lparmetis -lmetis -lhdf5 -mkl -lparmmg -lmmg -lcgns -lmpi

Begin optimization report for: WritePrismsUS3DFormat(MPI_Comm, RepartitionObject *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> &, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(47,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(50,65) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(57,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(60,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(76,45)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(89,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(93,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(167,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(169,47) ]
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(225,43)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(238,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(242,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(321,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(323,47) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: WritePrismsUS3DFormat(MPI_Comm, RepartitionObject *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> &, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(47,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(50,65) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(57,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(60,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(76,45)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(89,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(93,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(167,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(169,47) ]
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(225,43)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(238,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(242,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(321,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(323,47) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: WritePrismsUS3DFormat(MPI_Comm, RepartitionObject *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> &, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(47,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(50,65) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(57,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(60,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(76,45)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(89,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(93,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(167,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(169,47) ]
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(225,43)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(238,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(242,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(321,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(323,47) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: WritePrismsUS3DFormat(MPI_Comm, RepartitionObject *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> &, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(47,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(50,65) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(57,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(60,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(76,45)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(89,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(93,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(167,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(169,47) ]
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(225,43)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(238,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(242,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(321,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(323,47) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: WritePrismsUS3DFormat(MPI_Comm, RepartitionObject *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> &, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(69,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(80,30)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(229,30)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(47,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(50,65) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(57,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(60,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(76,45)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(89,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(93,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(167,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(169,47) ]
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(225,43)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(238,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(242,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(321,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(323,47) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::find(std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type> *, const std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_tree.h(2547,59)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type>::find(std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_tree.h(2547,59)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::operator[](std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, const std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::vector(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, const std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(82,23) inlined into /usr/include/c++/8/bits/stl_vector.h(464,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_construct.h(75,42) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::push_back(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, const std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::value_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(82,23) inlined into /usr/include/c++/8/bits/stl_vector.h(1086,4)
   remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(82,23) inlined into /usr/include/c++/8/bits/stl_vector.h(1086,4)
   remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_vector.h(1086,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer>(std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer, std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type, std::_Select1st<std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::value_type>, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_compare, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type, std::_Select1st<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::value_type>, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_compare, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_Rb_tree(std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type> *, const std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1851,6) inlined into /usr/include/c++/8/bits/stl_tree.h(948,16)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(114,7) inlined into /usr/include/c++/8/bits/stl_tree.h(948,16)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(128,7) inlined into /usr/include/c++/8/bits/stl_tree.h(948,16)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_M_copy<std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_Alloc_node>(std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type> *, std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_Const_Link_type, std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_Base_ptr, std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_Alloc_node &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1851,6)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::~vector(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_vector.h(568,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type, std::_Select1st<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type>, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_compare, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type, std::_Select1st<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type>, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_compare, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_type, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type, std::_Select1st<std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::value_type>, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::key_compare, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.857
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.500
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.500
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.357
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::value_type &, const std::vector<double, std::allocator<double>>::allocator_type &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.920 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_M_erase(std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type> *, std::_Rb_tree<std::set<int, std::less<int>, std::allocator<int>>::key_type, std::set<int, std::less<int>, std::allocator<int>>::value_type, std::_Identity<std::set<int, std::less<int>, std::allocator<int>>::value_type>, std::set<int, std::less<int>, std::allocator<int>>::key_compare, std::set<int, std::less<int>, std::allocator<int>>::_Key_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: AllGatherSet<int>(std::set<int, std::less<int>, std::allocator<int>> *, std::set<int, std::less<int>, std::allocator<int>> *, MPI_Comm)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.h(346,36)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at ../src/adapt_operations.h(365,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_operations.h(369,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.h(371,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: AllGatherSet<int>(std::set<int, std::less<int>, std::allocator<int>> *, std::set<int, std::less<int>, std::allocator<int>> *, MPI_Comm) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.h(346,36)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at ../src/adapt_operations.h(365,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_operations.h(369,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.h(371,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: AllGatherSet<int>(std::set<int, std::less<int>, std::allocator<int>> *, std::set<int, std::less<int>, std::allocator<int>> *, MPI_Comm) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.h(346,36)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at ../src/adapt_operations.h(365,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_operations.h(369,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.h(371,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: AllGatherSet<int>(std::set<int, std::less<int>, std::allocator<int>> *, std::set<int, std::less<int>, std::allocator<int>> *, MPI_Comm) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.h(346,36)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at ../src/adapt_operations.h(365,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_operations.h(369,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.h(371,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: AllGatherSet<int>(std::set<int, std::less<int>, std::allocator<int>> *, std::set<int, std::less<int>, std::allocator<int>> *, MPI_Comm) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(343,28)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_operations.h(344,28)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_operations.h(346,36)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at ../src/adapt_operations.h(365,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into ../src/adapt_operations.h(369,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into ../src/adapt_operations.h(371,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: WritePrismsUS3DFormat_V2(MPI_Comm, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::set<int, std::less<int>, std::allocator<int>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> &, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(443,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(446,65) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(453,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(456,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(472,45)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(485,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(489,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(563,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(565,47) ]
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(621,43)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(634,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(638,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(717,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(719,47) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: WritePrismsUS3DFormat_V2(MPI_Comm, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::set<int, std::less<int>, std::allocator<int>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> &, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(443,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(446,65) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(453,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(456,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(472,45)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(485,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(489,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(563,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(565,47) ]
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(621,43)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(634,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(638,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(717,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(719,47) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: WritePrismsUS3DFormat_V2(MPI_Comm, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::set<int, std::less<int>, std::allocator<int>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> &, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(443,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(446,65) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(453,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(456,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(472,45)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(485,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(489,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(563,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(565,47) ]
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(621,43)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(634,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(638,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(717,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(719,47) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: WritePrismsUS3DFormat_V2(MPI_Comm, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::set<int, std::less<int>, std::allocator<int>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> &, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(443,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(446,65) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(453,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(456,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(472,45)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(485,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(489,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(563,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(565,47) ]
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(621,43)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(634,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(638,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(717,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(719,47) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: WritePrismsUS3DFormat_V2(MPI_Comm, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::set<int, std::less<int>, std::allocator<int>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<int, std::allocator<int>> &, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into ../src/adapt_writeus3ddata.cpp(465,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(476,30)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into ../src/adapt_writeus3ddata.cpp(625,30)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(443,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(446,65) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(453,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(456,61) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(472,45)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(485,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(489,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(563,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(565,47) ]
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(621,43)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_vector.h(258,7) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(634,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(638,38) ]
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(717,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(719,47) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::_M_realloc_insert<const std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::value_type &>(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::iterator, const std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::value_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(82,23) inlined into /usr/include/c++/8/bits/vector.tcc(447,8)
   remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(82,23) inlined into /usr/include/c++/8/bits/vector.tcc(454,8)
   remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/vector.tcc(469,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/char_traits.h(233,7) inlined into /usr/include/c++/8/bits/char_traits.h(327,6)
   remark #15523: loop was not vectorized: loop control variable __s was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/char_traits.h(165,7) inlined into /usr/include/c++/8/bits/char_traits.h(328,11)
   remark #15523: loop was not vectorized: loop control variable __i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: WriteBoundaryDataUS3DFormat(MPI_Comm, RepartitionObject *, std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<double, std::allocator<double>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> &, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>> *, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>> *, std::vector<int, std::allocator<int>> &, int &, std::set<int, std::less<int>, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1105,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1105:31) and fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1105:31)
   remark #15346: vector dependence: assumed ANTI dependence between fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1105:31) and (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1105:31)
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1258,15)
   remark #15389: vectorization support: reference zdefs_row0.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1258:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1258,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1265,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1267,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1267,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1272,15)
   remark #15389: vectorization support: reference zdefs_row1.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1272:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1272,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1279,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1281,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1281,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1286,15)
   remark #15389: vectorization support: reference zdefs_row2.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1286:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1286,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1293,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1295,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1295,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1329,9)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1331,23) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1331,23) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(837,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(840,52) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(848,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(852,48) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(873,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(875,30) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(882,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(884,30) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(910,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(912,24) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(930,35)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(936,32) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(963,26)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(968,28) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(998,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1000,44) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1014,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1016,47) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1061,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1063,55) ]
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1124,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1126,49) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1134,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1136,51) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1172,57)
         remark #15523: loop was not vectorized: loop control variable u was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1307,33)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1311,24) ]
LOOP END
===========================================================================

Begin optimization report for: WriteBoundaryDataUS3DFormat(MPI_Comm, RepartitionObject *, std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<double, std::allocator<double>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> &, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>> *, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>> *, std::vector<int, std::allocator<int>> &, int &, std::set<int, std::less<int>, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1105,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1105:31) and fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1105:31)
   remark #15346: vector dependence: assumed ANTI dependence between fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1105:31) and (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1105:31)
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1258,15)
   remark #15389: vectorization support: reference zdefs_row0.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1258:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1258,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1265,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1267,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1267,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1272,15)
   remark #15389: vectorization support: reference zdefs_row1.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1272:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1272,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1279,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1281,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1281,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1286,15)
   remark #15389: vectorization support: reference zdefs_row2.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1286:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1286,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1293,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1295,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1295,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1329,9)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1331,23) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1331,23) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(837,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(840,52) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(848,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(852,48) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(873,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(875,30) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(882,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(884,30) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(910,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(912,24) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(930,35)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(936,32) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(963,26)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(968,28) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(998,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1000,44) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1014,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1016,47) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1061,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1063,55) ]
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1124,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1126,49) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1134,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1136,51) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1172,57)
         remark #15523: loop was not vectorized: loop control variable u was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1307,33)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1311,24) ]
LOOP END
===========================================================================

Begin optimization report for: WriteBoundaryDataUS3DFormat(MPI_Comm, RepartitionObject *, std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<double, std::allocator<double>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> &, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>> *, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>> *, std::vector<int, std::allocator<int>> &, int &, std::set<int, std::less<int>, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1105,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1105:31) and fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1105:31)
   remark #15346: vector dependence: assumed ANTI dependence between fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1105:31) and (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1105:31)
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1258,15)
   remark #15389: vectorization support: reference zdefs_row0.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1258:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1258,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1265,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1267,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1267,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1272,15)
   remark #15389: vectorization support: reference zdefs_row1.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1272:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1272,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1279,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1281,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1281,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1286,15)
   remark #15389: vectorization support: reference zdefs_row2.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1286:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1286,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1293,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1295,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1295,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1329,9)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1331,23) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1331,23) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(837,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(840,52) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(848,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(852,48) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(873,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(875,30) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(882,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(884,30) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(910,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(912,24) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(930,35)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(936,32) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(963,26)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(968,28) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(998,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1000,44) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1014,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1016,47) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1061,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1063,55) ]
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1124,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1126,49) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1134,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1136,51) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1172,57)
         remark #15523: loop was not vectorized: loop control variable u was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1307,33)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1311,24) ]
LOOP END
===========================================================================

Begin optimization report for: WriteBoundaryDataUS3DFormat(MPI_Comm, RepartitionObject *, std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<double, std::allocator<double>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> &, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>> *, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>> *, std::vector<int, std::allocator<int>> &, int &, std::set<int, std::less<int>, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1105,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1105:31) and fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1105:31)
   remark #15346: vector dependence: assumed ANTI dependence between fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1105:31) and (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1105:31)
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1258,15)
   remark #15389: vectorization support: reference zdefs_row0.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1258:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1258,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1265,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1267,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1267,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1272,15)
   remark #15389: vectorization support: reference zdefs_row1.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1272:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1272,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1279,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1281,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1281,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1286,15)
   remark #15389: vectorization support: reference zdefs_row2.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1286:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1286,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1293,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1295,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1295,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1329,9)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1331,23) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1331,23) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(837,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(840,52) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(848,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(852,48) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(873,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(875,30) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(882,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(884,30) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(910,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(912,24) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(930,35)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(936,32) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(963,26)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(968,28) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(998,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1000,44) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1014,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1016,47) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1061,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1063,55) ]
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1124,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1126,49) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1134,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1136,51) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1172,57)
         remark #15523: loop was not vectorized: loop control variable u was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1307,33)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1311,24) ]
LOOP END
===========================================================================

Begin optimization report for: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::operator[](std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, const std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::set<int, std::less<int>, std::allocator<int>>::find(std::set<int, std::less<int>, std::allocator<int>> *, const std::set<int, std::less<int>, std::allocator<int>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_set.h(777,26)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::find(std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, const std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(1170,26)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::find(std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, const std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(1170,26)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::push_back(std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::value_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(82,23) inlined into /usr/include/c++/8/bits/stl_vector.h(1086,4)
   remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(82,23) inlined into /usr/include/c++/8/bits/stl_vector.h(1086,4)
   remark #15523: loop was not vectorized: loop control variable __cur was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_vector.h(1086,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::pointer>(std::_Vector_base<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::pointer, std::_Vector_base<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::pointer)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::set<int, std::less<int>, std::allocator<int>>::insert(std::set<int, std::less<int>, std::allocator<int>> *, const std::set<int, std::less<int>, std::allocator<int>>::value_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_set.h(513,26)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::operator[](std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>> *, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::key_type &&)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(516,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(521,6)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(521,6)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(521,6)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::operator[](std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>> *, const std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::operator[](std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::key_type &&)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(516,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(521,6)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(521,6)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(521,6)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::clear(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_vector.h(1387,9)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 1.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::operator[](std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, const std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::key_type &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1894,7) inlined into /usr/include/c++/8/bits/stl_map.h(496,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(2058,7) inlined into /usr/include/c++/8/bits/stl_map.h(502,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type, const std::vector<int, std::allocator<int>>::value_type &, const std::vector<int, std::allocator<int>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.421
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.250 
   remark #15478: estimated potential speedup: 9.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.250 
   remark #15478: estimated potential speedup: 9.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.250 
   remark #15478: estimated potential speedup: 9.370 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type, const std::vector<int, std::allocator<int>>::value_type &, const std::vector<int, std::allocator<int>>::allocator_type &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.857
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type, const std::vector<int, std::allocator<int>>::value_type &, const std::vector<int, std::allocator<int>>::allocator_type &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.857
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.143
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type, const std::vector<int, std::allocator<int>>::value_type &, const std::vector<int, std::allocator<int>>::allocator_type &) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.769
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.810 
   remark #15478: estimated potential speedup: 3.070 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type, const std::vector<int, std::allocator<int>>::value_type &, const std::vector<int, std::allocator<int>>::allocator_type &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 2.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(431,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>::~map(std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type, const std::vector<int, std::allocator<int>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type, const std::vector<int, std::allocator<int>>::allocator_type &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type, const std::vector<int, std::allocator<int>>::allocator_type &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type, const std::vector<int, std::allocator<int>>::allocator_type &) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type, const std::vector<int, std::allocator<int>>::allocator_type &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(418,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::fill<std::vector<int, std::allocator<int>>::iterator, int>(std::vector<int, std::allocator<int>>::iterator, std::vector<int, std::allocator<int>>::iterator, const int &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into /usr/include/c++/8/bits/stl_algobase.h(732,7)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 8.100 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into /usr/include/c++/8/bits/stl_algobase.h(732,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 8.100 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into /usr/include/c++/8/bits/stl_algobase.h(732,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 8.100 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::fill<std::vector<int, std::allocator<int>>::iterator, int>(std::vector<int, std::allocator<int>>::iterator, std::vector<int, std::allocator<int>>::iterator, const int &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into /usr/include/c++/8/bits/stl_algobase.h(732,7)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 4.190 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into /usr/include/c++/8/bits/stl_algobase.h(732,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 4.190 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into /usr/include/c++/8/bits/stl_algobase.h(732,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 4.190 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::fill<std::vector<int, std::allocator<int>>::iterator, int>(std::vector<int, std::allocator<int>>::iterator, std::vector<int, std::allocator<int>>::iterator, const int &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into /usr/include/c++/8/bits/stl_algobase.h(732,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into /usr/include/c++/8/bits/stl_algobase.h(732,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 4.190 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into /usr/include/c++/8/bits/stl_algobase.h(732,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::fill<std::vector<int, std::allocator<int>>::iterator, int>(std::vector<int, std::allocator<int>>::iterator, std::vector<int, std::allocator<int>>::iterator, const int &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into /usr/include/c++/8/bits/stl_algobase.h(732,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into /usr/include/c++/8/bits/stl_algobase.h(732,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.460 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7) inlined into /usr/include/c++/8/bits/stl_algobase.h(732,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::resize(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.571
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.880 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::resize(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.923
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::resize(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.270 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
      remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::resize(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::resize(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
      remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7) inlined into /usr/include/c++/8/bits/stl_vector.h(828,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::set<int, std::less<int>, std::allocator<int>>::set(std::set<int, std::less<int>, std::allocator<int>> *, const std::set<int, std::less<int>, std::allocator<int>> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1851,6) inlined into /usr/include/c++/8/bits/stl_set.h(224,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/ext/new_allocator.h(111,27) ]
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(114,7) inlined into /usr/include/c++/8/bits/stl_set.h(224,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(128,7) inlined into /usr/include/c++/8/bits/stl_set.h(224,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>::vector(std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>> *, const std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(82,23) inlined into /usr/include/c++/8/bits/stl_vector.h(464,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_construct.h(75,42) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::vector(std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_uninitialized.h(82,23) inlined into /usr/include/c++/8/bits/stl_vector.h(464,4)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_construct.h(75,42) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>::~vector(std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_vector.h(568,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::set<int, std::less<int>, std::allocator<int>>::clear(std::set<int, std::less<int>, std::allocator<int>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_set.h(735,14)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::~map(std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::key_type, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::value_type, std::_Select1st<std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::value_type>, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::key_compare, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::key_type, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::value_type, std::_Select1st<std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::value_type>, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::key_compare, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::key_type, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::value_type, std::_Select1st<std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::value_type>, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::key_compare, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::~vector(std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4) inlined into /usr/include/c++/8/bits/stl_vector.h(568,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>>::~map(std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>>::~map(std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_map.h(301,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: std::set<int, std::less<int>, std::allocator<int>>::~set(std::set<int, std::less<int>, std::allocator<int>> *) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_tree.h(1877,7) inlined into /usr/include/c++/8/bits/stl_set.h(282,7)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/8/bits/stl_tree.h(1879,4) ]
LOOP END
===========================================================================

Begin optimization report for: WriteBoundaryDataUS3DFormat_V2(MPI_Comm, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::set<int, std::less<int>, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, int, std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<double, std::allocator<double>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> &, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>> *, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>> *, std::vector<int, std::allocator<int>> &, int &, std::set<int, std::less<int>, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1685,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1685:31) and fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1685:31)
   remark #15346: vector dependence: assumed ANTI dependence between fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1685:31) and (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1685:31)
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1838,15)
   remark #15389: vectorization support: reference zdefs_row0.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1838:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1838,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1845,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1847,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1847,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1852,15)
   remark #15389: vectorization support: reference zdefs_row1.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1852:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1852,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1859,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1861,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1861,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1866,15)
   remark #15389: vectorization support: reference zdefs_row2.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1866:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1866,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1873,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1875,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1875,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1909,9)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1911,23) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1911,23) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1417,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1420,52) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1428,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1432,48) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1453,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1457,33) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1462,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1466,33) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1490,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1494,27) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1510,35)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1518,34) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1543,26)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1550,38) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1578,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1580,44) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1594,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1596,47) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1641,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1643,55) ]
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1704,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1706,49) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1714,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1716,51) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1752,57)
         remark #15523: loop was not vectorized: loop control variable u was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1887,33)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1891,24) ]
LOOP END
===========================================================================

Begin optimization report for: WriteBoundaryDataUS3DFormat_V2(MPI_Comm, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::set<int, std::less<int>, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, int, std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<double, std::allocator<double>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> &, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>> *, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>> *, std::vector<int, std::allocator<int>> &, int &, std::set<int, std::less<int>, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1685,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1685:31) and fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1685:31)
   remark #15346: vector dependence: assumed ANTI dependence between fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1685:31) and (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1685:31)
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1838,15)
   remark #15389: vectorization support: reference zdefs_row0.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1838:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1838,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1845,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1847,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1847,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1852,15)
   remark #15389: vectorization support: reference zdefs_row1.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1852:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1852,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1859,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1861,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1861,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1866,15)
   remark #15389: vectorization support: reference zdefs_row2.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1866:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1866,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1873,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1875,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1875,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1909,9)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1911,23) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1911,23) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1417,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1420,52) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1428,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1432,48) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1453,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1457,33) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1462,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1466,33) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1490,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1494,27) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1510,35)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1518,34) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1543,26)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1550,38) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1578,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1580,44) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1594,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1596,47) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1641,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1643,55) ]
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1704,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1706,49) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1714,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1716,51) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1752,57)
         remark #15523: loop was not vectorized: loop control variable u was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1887,33)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1891,24) ]
LOOP END
===========================================================================

Begin optimization report for: WriteBoundaryDataUS3DFormat_V2(MPI_Comm, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::set<int, std::less<int>, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, int, std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<double, std::allocator<double>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> &, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>> *, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>> *, std::vector<int, std::allocator<int>> &, int &, std::set<int, std::less<int>, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1685,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1685:31) and fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1685:31)
   remark #15346: vector dependence: assumed ANTI dependence between fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1685:31) and (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1685:31)
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1838,15)
   remark #15389: vectorization support: reference zdefs_row0.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1838:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1838,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1845,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1847,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1847,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1852,15)
   remark #15389: vectorization support: reference zdefs_row1.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1852:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1852,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1859,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1861,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1861,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1866,15)
   remark #15389: vectorization support: reference zdefs_row2.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1866:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1866,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1873,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1875,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1875,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1909,9)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1911,23) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1911,23) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1417,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1420,52) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1428,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1432,48) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1453,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1457,33) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1462,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1466,33) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1490,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1494,27) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1510,35)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1518,34) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1543,26)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1550,38) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1578,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1580,44) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1594,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1596,47) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1641,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1643,55) ]
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1704,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1706,49) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1714,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1716,51) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1752,57)
         remark #15523: loop was not vectorized: loop control variable u was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1887,33)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1891,24) ]
LOOP END
===========================================================================

Begin optimization report for: WriteBoundaryDataUS3DFormat_V2(MPI_Comm, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, std::vector<double, std::allocator<double>>, std::less<int>, std::allocator<std::pair<const int, std::vector<double, std::allocator<double>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::set<int, std::less<int>, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, int, std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, std::vector<int, std::allocator<int>>, std::less<int>, std::allocator<std::pair<const int, std::vector<int, std::allocator<int>>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<double, std::allocator<double>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> &, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> *, std::map<int, char *, std::less<int>, std::allocator<std::pair<const int, char *>>> *, std::vector<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>> *, std::vector<int, std::allocator<int>> &, int &, std::set<int, std::less<int>, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &, std::vector<int, std::allocator<int>> &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1685,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1685:31) and fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1685:31)
   remark #15346: vector dependence: assumed ANTI dependence between fce.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__ (1685:31) and (ifn_bc.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiE (1685:31)
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1838,15)
   remark #15389: vectorization support: reference zdefs_row0.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1838:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1838,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1845,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1847,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1847,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1852,15)
   remark #15389: vectorization support: reference zdefs_row1.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1852:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1852,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1859,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1861,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1861,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1866,15)
   remark #15389: vectorization support: reference zdefs_row2.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE.__b_St12_Vector_baseIiSaIiEE[_2] has unaligned access
   remark #15388: vectorization support: reference at (1866:21) has aligned access   [ ../src/adapt_writeus3ddata.cpp(1866,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1873,5)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1875,19) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1875,19) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1909,9)
   remark #26015: Exception can be thrown by the call to std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)   [ ../src/adapt_writeus3ddata.cpp(1911,23) ]
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1911,23) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1417,50)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1420,52) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1428,47)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1432,48) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1453,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1457,33) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1462,39)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1466,33) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1490,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1494,27) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1510,35)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1518,34) ]
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1543,26)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1550,38) ]

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1578,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1580,44) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1594,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1596,47) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1641,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1643,55) ]
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1704,13)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1706,49) ]

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1714,17)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1716,51) ]
      LOOP END

      LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1752,57)
         remark #15523: loop was not vectorized: loop control variable u was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/adapt_writeus3ddata.cpp(1887,33)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ ../src/adapt_writeus3ddata.cpp(1891,24) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>::pointer>(std::_Vector_base<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>::pointer, std::_Vector_base<std::vector<char, std::allocator<char>>, std::allocator<std::vector<char, std::allocator<char>>>>::pointer)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/8/bits/stl_construct.h(107,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type>(std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, const std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.421
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.250 
   remark #15478: estimated potential speedup: 9.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.250 
   remark #15478: estimated potential speedup: 9.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.250 
   remark #15478: estimated potential speedup: 9.370 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type>(std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, const std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.857
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type>(std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, const std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.857
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.143
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type>(std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, const std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type &) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.769
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.810 
   remark #15478: estimated potential speedup: 3.070 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type>(std::_Vector_base<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::size_type, const std::iterator_traits<std::vector<int, std::allocator<int>>::pointer>::value_type &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 2.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.857
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 7.180 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.500
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.500
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type &) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.357
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_n_a<std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type>(std::_Vector_base<double, std::allocator<double>>::pointer, std::vector<double, std::allocator<double>>::size_type, const std::iterator_traits<std::_Vector_base<double, std::allocator<double>>::pointer>::value_type &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(754,3) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.875
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.920 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(752,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_a<std::vector<int, std::allocator<int>>::pointer, int>(std::vector<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::pointer, const int &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 8.100 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 8.100 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 8.100 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::__fill_a<std::vector<int, std::allocator<int>>::pointer, int>(std::vector<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::pointer, const int &) [skylake_avx512]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 4.190 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 4.190 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 4.190 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::__fill_a<std::vector<int, std::allocator<int>>::pointer, int>(std::vector<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::pointer, const int &) [haswell]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 4.190 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: std::__fill_a<std::vector<int, std::allocator<int>>::pointer, int>(std::vector<int, std::allocator<int>>::pointer, std::vector<int, std::allocator<int>>::pointer, const int &) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7)
   remark #15388: vectorization support: reference *__first has aligned access   [ /usr/include/c++/8/bits/stl_algobase.h(696,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.460 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/stl_algobase.h(695,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================
